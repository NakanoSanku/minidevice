{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MiniDevice","text":"<p>\u2b50 star my  project.(~~\u7b97\u6211\u6c42\u4f60\u4e86~~)</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install minidevice\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<ul> <li>MiniDevice<ul> <li>screencap<ul> <li>Minicap</li> <li>ADBcap</li> <li>DroidCast</li> <li>ScrcpyCap</li> </ul> </li> <li>touch<ul> <li>Minitouch</li> <li>ADBtouch</li> <li>ScrcpyTouch</li> </ul> </li> </ul> </li> </ul> <p>\u9605\u8bfb\u4e0b\u9762\u90e8\u5206\u4e4b\u524d\u5148\u9605\u8bfbAPI\u6587\u6863</p>"},{"location":"#qa","title":"Q&amp;A","text":"<p>Q: \u8bbe\u5907id\u662f\u4ec0\u4e48</p> <p>A: adb devices \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bb5</p> <p>Q: scrcpy.Client\u662f\u4ec0\u4e48</p> <p>A: \u901a\u8fc7scrcpy.Client()\u521b\u5efa\u7684\u5bf9\u8c61</p> <p>\u5177\u4f53\u53c2\u8003 https://github.com/leng-yue/py-scrcpy-client</p> <p>scrcpy.Client()\u7b80\u8981\u53c2\u6570\u8bf4\u660e</p> <ul> <li>device \u8bbe\u5907id</li> <li>max_width \u6700\u5927\u5bbd\u5ea6</li> <li>bitrate \u7801\u7387</li> <li>max_fps \u6700\u5927\u5e27\u7387</li> </ul>"},{"location":"screencap/","title":"screencap","text":"<p>\u6240\u6709\u622a\u56fe\u7c7b\u57fa\u4e8eScreenCap,\u6240\u4ee5\u4ed6\u4eec\u622a\u56fe\u65b9\u6cd5\u4e0eScreenCap\u76f8\u540c </p> <pre><code>from minidevice import Minicap\n#\u521b\u5efa\u622a\u56fe\u5bf9\u8c61\ncapdevice = Minicap(\"127.0.0.1:16834\")\n#\u83b7\u53d6opencv\u683c\u5f0f\u622a\u56fe\ncap = capdevice.screen_opencv()\n#\u83b7\u53d6raw\u683c\u5f0f\u622a\u56fe\ncap = capdevice.screen_raw()\n#\u622a\u56fe\u5e76\u4fdd\u5b58\u672c\u5730\ncapdevice.save_screen()\n</code></pre> <pre><code>from minidevice import DroidCast\n#\u521b\u5efa\u622a\u56fe\u5bf9\u8c61\ncapdevice = DroidCast(\"127.0.0.1:16834\")\n#\u83b7\u53d6opencv\u683c\u5f0f\u622a\u56fe\ncap = capdevice.screen_opencv()\n#\u83b7\u53d6raw\u683c\u5f0f\u622a\u56fe\ncap = capdevice.screen_raw()\n#\u622a\u56fe\u5e76\u4fdd\u5b58\u672c\u5730\ncapdevice.save_screen()\n</code></pre> <pre><code>from minidevice import ADBcap\n#\u521b\u5efa\u622a\u56fe\u5bf9\u8c61\ncapdevice = ADBcap(\"127.0.0.1:16834\")\n#\u83b7\u53d6opencv\u683c\u5f0f\u622a\u56fe\ncap = capdevice.screen_opencv()\n#\u83b7\u53d6raw\u683c\u5f0f\u622a\u56fe\ncap = capdevice.screen_raw()\n#\u622a\u56fe\u5e76\u4fdd\u5b58\u672c\u5730\ncapdevice.save_screen()\n</code></pre> <pre><code>from minidevice import ScrcpyCap\nimport scrcpy\n#\u521b\u5efa\u622a\u56fe\u5bf9\u8c61\ndevice=scrcpy.Client(\"127.0.0.1:16834\")\ncapdevice = ScrcpyCap(device)\n#\u83b7\u53d6opencv\u683c\u5f0f\u622a\u56fe\ncap = capdevice.screen_opencv()\n#\u83b7\u53d6raw\u683c\u5f0f\u622a\u56fe\ncap = capdevice.screen_raw()\n#\u622a\u56fe\u5e76\u4fdd\u5b58\u672c\u5730\ncapdevice.save_screen()\n</code></pre>"},{"location":"screencap/#minidevice.screencap.ScreenCap","title":"<code>ScreenCap</code>","text":"<p>         Bases: <code>ABC</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\screencap.py</code> <pre><code>class ScreenCap(ABC):\n    @abstractmethod\n    def screencap_raw(self) -&gt; bytes:\n\"\"\"\u622a\u56fe\u6e90\u6570\u636e\"\"\"\n\n    def screencap_opencv(self):\n\"\"\"opencv\u683c\u5f0f\u622a\u56fe\"\"\"\n        raw = self.screencap_raw()\n        return cv2.imdecode(np.frombuffer(raw, dtype=np.uint8), cv2.IMREAD_COLOR)\n\n    def save_screencap(self, filename=\"screencap.png\"):\n\"\"\"\n        save_screencap \u4fdd\u5b58\u622a\u56fe\n\n        Args:\n            filename (str, optional): \u622a\u56fe\u4fdd\u5b58\u8def\u5f84. Defaults to \"screencap.png\".\n        \"\"\"\n        with open(filename,\"wb\") as fp:\n            fp.write(self.screencap_raw())\n</code></pre>"},{"location":"screencap/#minidevice.screencap.ScreenCap.save_screencap","title":"<code>save_screencap(filename='screencap.png')</code>","text":"<p>save_screencap \u4fdd\u5b58\u622a\u56fe</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>\u622a\u56fe\u4fdd\u5b58\u8def\u5f84. Defaults to \"screencap.png\".</p> <code>'screencap.png'</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\screencap.py</code> <pre><code>def save_screencap(self, filename=\"screencap.png\"):\n\"\"\"\n    save_screencap \u4fdd\u5b58\u622a\u56fe\n\n    Args:\n        filename (str, optional): \u622a\u56fe\u4fdd\u5b58\u8def\u5f84. Defaults to \"screencap.png\".\n    \"\"\"\n    with open(filename,\"wb\") as fp:\n        fp.write(self.screencap_raw())\n</code></pre>"},{"location":"screencap/#minidevice.screencap.ScreenCap.screencap_opencv","title":"<code>screencap_opencv()</code>","text":"<p>opencv\u683c\u5f0f\u622a\u56fe</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\screencap.py</code> <pre><code>def screencap_opencv(self):\n\"\"\"opencv\u683c\u5f0f\u622a\u56fe\"\"\"\n    raw = self.screencap_raw()\n    return cv2.imdecode(np.frombuffer(raw, dtype=np.uint8), cv2.IMREAD_COLOR)\n</code></pre>"},{"location":"screencap/#minidevice.screencap.ScreenCap.screencap_raw","title":"<code>screencap_raw()</code>  <code>abstractmethod</code>","text":"<p>\u622a\u56fe\u6e90\u6570\u636e</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\screencap.py</code> <pre><code>@abstractmethod\ndef screencap_raw(self) -&gt; bytes:\n\"\"\"\u622a\u56fe\u6e90\u6570\u636e\"\"\"\n</code></pre>"},{"location":"screencap/#minidevice.minicap.Minicap","title":"<code>Minicap</code>","text":"<p>         Bases: <code>ScreenCap</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\minicap.py</code> <pre><code>class Minicap(ScreenCap):\n    def __init__(\n        self,\n        device,\n        rate=15,\n        quality=100,\n        use_stream=True,\n    ) -&gt; None:\n\"\"\"\n        __init__ minicap\u622a\u56fe\u65b9\u5f0f\n\n        Args:\n            device (str): \u8bbe\u5907id\n            rate (int, optional): \u622a\u56fe\u5e27\u7387. Defaults to 15.\n            quality (int, optional): \u622a\u56fe\u54c1\u8d281~100\u4e4b\u95f4. Defaults to 100.\n            use_stream (bool, optional): \u662f\u5426\u4f7f\u7528stream\u7684\u65b9\u5f0f. Defaults to True.\n        \"\"\"\n        self.minicap_adb = ADB(device)\n        self.use_stream = use_stream\n        self.__get_device_info()\n        minicap_name = \"minicap_{}\".format(time.time())\n        minicap_params = {\n            \"minicap_name\": minicap_name,\n            \"rate\": rate,\n            \"quality\": quality,\n        }\n        self.__get_minicap_params(**minicap_params)\n        if self.use_stream:\n            self.__start_minicap_by_stream()\n\n    def screencap_raw(self) -&gt; bytes:\n        if self.use_stream:\n            if self.minicap_popen.poll() is not None:\n                logger.warning(\"\u5c1d\u8bd5\u91cd\u542fminicap\u4e2d\")\n                self.__stop_minicap_by_stream()\n                self.__start_minicap_by_stream()\n            logger.debug(\"screen by minicap stream\")\n            return self.screen_queue.get()\n        else:\n            logger.debug(\"screen by minicap frame\")\n            return self.__minicap_frame()\n\n    def __minicap_frame(self):\n        adb_command = [\n            \"shell\",\n            \"LD_LIBRARY_PATH=/data/local/tmp\",\n            \"/data/local/tmp/minicap\",\n        ]\n        adb_command.extend([\"-P\", f\"{self.vm_size}@{self.vm_size}/0\"])\n        adb_command.extend([\"-Q\", str(self.quality)])\n        adb_command.extend([\"-s\"])\n        raw_data = self.minicap_adb.adb_command(adb_command)\n        jpg_data = raw_data.split(b\"for JPG encoder\\n\" + line_breaker(self.sdk))[-1]\n        jpg_data = jpg_data.replace(line_breaker(self.sdk), b\"\\n\")\n        return jpg_data\n\n    def __get_device_info(self):\n        self.vm_size = self.minicap_adb.get_screen_resolution()\n        self.abi = self.minicap_adb.get_abi()\n        self.sdk = self.minicap_adb.get_sdk()\n\n    def __get_minicap_params(self, minicap_name, quality, rate, ip):\n        self.minicap_name = minicap_name\n        self.quality = quality\n        self.rate = rate\n        self.ip = ip\n\n    def __minicap_available(func):\n        def wrapper(self, *args, **kwargs):\n            try:\n                adb_command = [\n                    \"shell\",\n                    \"LD_LIBRARY_PATH=/data/local/tmp\",\n                    \"/data/local/tmp/minicap\",\n                ]\n                adb_command.extend([\"-P\", f\"{self.vm_size}@{self.vm_size}/0\"])\n                adb_command.extend([\"-t\"])\n                result = self.minicap_adb.adb_command(adb_command).strip()\n                if \"OK\" in result.decode(\"utf-8\"):\n                    return func(self, *args, **kwargs)\n                return False\n            except subprocess.CalledProcessError:\n                return False\n\n        return wrapper\n\n    def __minicap_install(self):\n        if self.sdk == 32 and self.abi == \"x86_64\":\n            self.abi = \"x86\"\n\n        MNC_HOME = \"/data/local/tmp/minicap\"\n        MNC_SO_HOME = \"/data/local/tmp/minicap.so\"\n\n        self.minicap_adb.push_file(f\"{MINICAP_PATH}/{self.abi}/minicap\", MNC_HOME)\n        self.minicap_adb.push_file(\n            f\"{MINICAPSO_PATH}/android-{self.sdk}/{self.abi}/minicap.so\", MNC_SO_HOME\n        )\n        self.minicap_adb.change_file_permission(\"+x\", MNC_HOME)\n\n    @__minicap_available\n    def __start_minicap(self):\n        adb_command = [ADB_PATH]\n        if self.minicap_adb.device is not None:\n            adb_command.extend([\"-s\", self.minicap_adb.device])\n        adb_command.extend(\n            [\"shell\", \"LD_LIBRARY_PATH=/data/local/tmp\", \"/data/local/tmp/minicap\"]\n        )\n        adb_command.extend([\"-n\", f\"{self.minicap_name}\"])\n        adb_command.extend([\"-P\", f\"{self.vm_size}@{self.vm_size}/0\"])\n        adb_command.extend([\"-Q\", str(self.quality)])\n        adb_command.extend([\"-r\", str(self.rate)])\n        adb_command.extend([\"-S\"])\n        self.minicap_popen = subprocess.Popen(\n            adb_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL\n        )\n        time.sleep(2)\n        logger.info(\"\u542f\u52a8minicap\")\n        return True\n\n    def __forward_minicap(self):\n        self.minicap_port = self.minicap_adb.forward_port(\n            \"localabstract:{}\".format(self.minicap_name)\n        )\n\n    def __read_minicap_stream(self):\n        self.minicap_stream = MinicapStream.getBuilder(self.ip, self.minicap_port)\n        self.minicap_stream.run()\n        self.banner = self.minicap_stream.banner\n        self.screen_queue = self.minicap_stream.queue\n\n    def __start_minicap_by_stream(self):\n        if not self.__start_minicap():\n            self.__minicap_install()\n            if not self.__start_minicap():\n                raise Exception(\"minicap\u4e0d\u53ef\u7528\")\n        self.__forward_minicap()\n        self.__read_minicap_stream()\n\n    def __stop_minicap_by_stream(self):\n        self.minicap_stream.stop()  # \u505c\u6b62stream\n        self.minicap_adb.remove_forward(self.minicap_port)  # \u6e05\u7406\u7aef\u53e3\n        if self.minicap_popen.poll() is None:  # \u6e05\u7406\u7ba1\u9053\n            self.minicap_popen.kill()\n\n    def __del__(self):\n        self.__stop_minicap_by_stream()\n</code></pre>"},{"location":"screencap/#minidevice.minicap.Minicap.__init__","title":"<code>__init__(device, rate=15, quality=100, use_stream=True)</code>","text":"<p>init minicap\u622a\u56fe\u65b9\u5f0f</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>\u8bbe\u5907id</p> required <code>rate</code> <code>int</code> <p>\u622a\u56fe\u5e27\u7387. Defaults to 15.</p> <code>15</code> <code>quality</code> <code>int</code> <p>\u622a\u56fe\u54c1\u8d281~100\u4e4b\u95f4. Defaults to 100.</p> <code>100</code> <code>use_stream</code> <code>bool</code> <p>\u662f\u5426\u4f7f\u7528stream\u7684\u65b9\u5f0f. Defaults to True.</p> <code>True</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\minicap.py</code> <pre><code>def __init__(\n    self,\n    device,\n    rate=15,\n    quality=100,\n    use_stream=True,\n) -&gt; None:\n\"\"\"\n    __init__ minicap\u622a\u56fe\u65b9\u5f0f\n\n    Args:\n        device (str): \u8bbe\u5907id\n        rate (int, optional): \u622a\u56fe\u5e27\u7387. Defaults to 15.\n        quality (int, optional): \u622a\u56fe\u54c1\u8d281~100\u4e4b\u95f4. Defaults to 100.\n        use_stream (bool, optional): \u662f\u5426\u4f7f\u7528stream\u7684\u65b9\u5f0f. Defaults to True.\n    \"\"\"\n    self.minicap_adb = ADB(device)\n    self.use_stream = use_stream\n    self.__get_device_info()\n    minicap_name = \"minicap_{}\".format(time.time())\n    minicap_params = {\n        \"minicap_name\": minicap_name,\n        \"rate\": rate,\n        \"quality\": quality,\n    }\n    self.__get_minicap_params(**minicap_params)\n    if self.use_stream:\n        self.__start_minicap_by_stream()\n</code></pre>"},{"location":"screencap/#minidevice.DroidCast.DroidCast","title":"<code>DroidCast</code>","text":"<p>         Bases: <code>ScreenCap</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\DroidCast.py</code> <pre><code>class DroidCast(ScreenCap):\n    def __init__(self, device, DroidCastServerPort=53516) -&gt; None:\n\"\"\"\n        __init__ DroidCast\u622a\u56fe\u65b9\u6cd5\n\n        Args:\n            device (str): \u8bbe\u5907id\n            DroidCastServerPort (int, optional): DroidCastServerPort\u670d\u52a1\u7aef\u7aef\u53e3\u53f7. Defaults to 53516.\n        \"\"\"\n        self.droidcast_adb = ADB(device)\n        self.DroidCastServerPort = DroidCastServerPort\n        self.class_path = APK_ANDROID_PATH \n        self.DroidCastSession = requests.Session()\n        self.__install()\n        self.__start()\n\n    def __install(self):\n        self.droidcast_adb.push_file(APK_PATH, self.class_path)\n        self.droidcast_adb.install_apk(APK_PATH)\n\n    def __start_droidcast(self):\n        out = str(\n            self.droidcast_adb.adb_command(\n                [\"shell\", \"pm\", \"path\", \"com.rayworks.droidcast\"]\n            )\n        )\n        prefix = \"package:\"\n        postfix = \".apk\"\n        beg = out.index(prefix, 0)\n        end = out.rfind(postfix)\n\n        self.class_path = (\n            \"CLASSPATH=\" + out[beg + len(prefix) : (end + len(postfix))].strip()\n        )\n        print(self.class_path)\n        start_droidcast_cmd = (\n            \"exec app_process / com.rayworks.droidcast.Main --port={}\".format(\n                self.DroidCastServerPort\n            )\n        )\n        self.droidcast_popen = subprocess.Popen(\n            [\n                ADB_PATH,\n                \"-s\",\n                self.droidcast_adb.device,\n                \"shell\",\n                self.class_path,\n                start_droidcast_cmd,\n            ],\n            stderr=subprocess.DEVNULL,\n            stdout=subprocess.DEVNULL,\n        )\n\n    def __forward_port(self):\n        self.droidcast_port = self.droidcast_adb.forward_port(\n            \"tcp:{}\".format(self.DroidCastServerPort)\n        )\n        self.droidcast_url = \"http://localhost:{}/screenshot\".format(\n            self.droidcast_port\n        )\n        print(self.droidcast_adb.list_forward_port())\n        print(self.droidcast_url)\n\n    def __start(self):\n        self.__start_droidcast()\n        self.__forward_port()\n        print(\"DroidCast\u542f\u52a8\u5b8c\u6210\")\n\n    def __stop(self):\n        self.droidcast_adb.remove_forward(self.droidcast_port)  # \u6e05\u7406\u8f6c\u53d1\u7aef\u53e3\n        if self.droidcast_popen.poll() is None:\n            self.droidcast_popen.kill()  # \u5173\u95ed\u7ba1\u9053\n\n    def screencap_raw(self) -&gt; bytes:\n        if self.droidcast_popen.poll() is not None:\n            self.__stop()\n            self.__start()\n        return self.DroidCastSession.get(self.droidcast_url, timeout=3).content\n\n    def __del__(self):\n        self.__stop()\n</code></pre>"},{"location":"screencap/#minidevice.DroidCast.DroidCast.__init__","title":"<code>__init__(device, DroidCastServerPort=53516)</code>","text":"<p>init DroidCast\u622a\u56fe\u65b9\u6cd5</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>\u8bbe\u5907id</p> required <code>DroidCastServerPort</code> <code>int</code> <p>DroidCastServerPort\u670d\u52a1\u7aef\u7aef\u53e3\u53f7. Defaults to 53516.</p> <code>53516</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\DroidCast.py</code> <pre><code>def __init__(self, device, DroidCastServerPort=53516) -&gt; None:\n\"\"\"\n    __init__ DroidCast\u622a\u56fe\u65b9\u6cd5\n\n    Args:\n        device (str): \u8bbe\u5907id\n        DroidCastServerPort (int, optional): DroidCastServerPort\u670d\u52a1\u7aef\u7aef\u53e3\u53f7. Defaults to 53516.\n    \"\"\"\n    self.droidcast_adb = ADB(device)\n    self.DroidCastServerPort = DroidCastServerPort\n    self.class_path = APK_ANDROID_PATH \n    self.DroidCastSession = requests.Session()\n    self.__install()\n    self.__start()\n</code></pre>"},{"location":"screencap/#minidevice.adbcap.ADBcap","title":"<code>ADBcap</code>","text":"<p>         Bases: <code>ScreenCap</code>, <code>ADB</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adbcap.py</code> <pre><code>class ADBcap(ScreenCap, ADB):\n    def __init__(self, device) -&gt; None:\n\"\"\"\n        __init__ ADB \u622a\u56fe\u65b9\u5f0f\n\n        Args:\n            device (str): \u8bbe\u5907id\n        \"\"\"\n        ADB.__init__(self, device=device)\n\n    def screencap_raw(self) -&gt; bytes:\n        logger.debug(f\"screen by ADB\")\n        return ADB.__screencap_raw(self)\n</code></pre>"},{"location":"screencap/#minidevice.adbcap.ADBcap.__init__","title":"<code>__init__(device)</code>","text":"<p>init ADB \u622a\u56fe\u65b9\u5f0f</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>\u8bbe\u5907id</p> required Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adbcap.py</code> <pre><code>def __init__(self, device) -&gt; None:\n\"\"\"\n    __init__ ADB \u622a\u56fe\u65b9\u5f0f\n\n    Args:\n        device (str): \u8bbe\u5907id\n    \"\"\"\n    ADB.__init__(self, device=device)\n</code></pre>"},{"location":"screencap/#minidevice.scrcpycap.ScrcpyCap","title":"<code>ScrcpyCap</code>","text":"<p>         Bases: <code>ScreenCap</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\scrcpycap.py</code> <pre><code>class ScrcpyCap(ScreenCap):\n    def __init__(self, device: scrcpy.Client) -&gt; None:\n\"\"\"\n        __init__ ScrcpyCap\n\n        Args:\n            device: scrcpy.Client\n\n        \"\"\"\n        self.client = device\n\n    def screencap_raw(self) -&gt; bytes:\n        _, img_data = cv2.imencode(\".png\", self.screencap_opencv())\n        return img_data.tobytes()\n\n    def screencap_opencv(self):\n        return self.client.last_frame\n</code></pre>"},{"location":"screencap/#minidevice.scrcpycap.ScrcpyCap.__init__","title":"<code>__init__(device)</code>","text":"<p>init ScrcpyCap</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>scrcpy.Client</code> <p>scrcpy.Client</p> required Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\scrcpycap.py</code> <pre><code>def __init__(self, device: scrcpy.Client) -&gt; None:\n\"\"\"\n    __init__ ScrcpyCap\n\n    Args:\n        device: scrcpy.Client\n\n    \"\"\"\n    self.client = device\n</code></pre>"},{"location":"touch/","title":"touch","text":"<p>\u6240\u6709\u622a\u56fe\u7c7b\u57fa\u4e8eTouch,\u6240\u4ee5\u4ed6\u4eec\u64cd\u4f5c\u65b9\u6cd5\u4e0eTouch\u76f8\u540c</p> <pre><code>from minidevice import Minitouch\n#\u521b\u5efa\u64cd\u4f5c\u5bf9\u8c61\ntouchdevice = Minitouch(\"127.0.0.1:16834\")\n#\u70b9\u51fb\ntouchdevice.click(x=101,y=101,duration=150)\n#\u957f\u6309\ntouchdevice.click(x=101,y=101,duration=500)\n#\u6ed1\u52a8\ntouchdevice.swipe([(100,100),(500,500)])\n</code></pre> <pre><code>from minidevice import ADBtouch\n#\u521b\u5efa\u64cd\u4f5c\u5bf9\u8c61\ntouchdevice = ADBtouch(\"127.0.0.1:16834\")\n#\u70b9\u51fb\ntouchdevice.click(x=101,y=101,duration=150)\n#\u957f\u6309\ntouchdevice.click(x=101,y=101,duration=500)\n#\u6ed1\u52a8\ntouchdevice.swipe([(100,100),(500,500)])\n</code></pre> <pre><code>from minidevice import ScrcpyTouch\nimport scrcpy\n#\u521b\u5efa\u64cd\u4f5c\u5bf9\u8c61\ndevice=scrcpy.Client(\"127.0.0.1:16834\")\ntouchdevice = ScrcpyTouch(device)\n#\u70b9\u51fb\ntouchdevice.click(x=101,y=101,duration=150)\n#\u957f\u6309\ntouchdevice.click(x=101,y=101,duration=500)\n#\u6ed1\u52a8\ntouchdevice.swipe([(100,100),(500,500)])\n</code></pre>"},{"location":"touch/#minidevice.touch.Touch","title":"<code>Touch</code>","text":"<p>         Bases: <code>ABC</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\touch.py</code> <pre><code>class Touch(ABC):\n    @abstractclassmethod\n    def click(self, x: int, y: int, duration: int = 100):\n\"\"\"\n        click \u70b9\u51fb\n\n        Args:\n            x (int): \u6a2a\u5750\u6807\n            y (int): \u7eb5\u5750\u6807\n            duration (int, optional): \u6301\u7eed\u65f6\u95f4. Defaults to 100.\n        \"\"\"\n\n    @abstractclassmethod\n    def swipe(self, points: list, duration: int = 300):\n\"\"\"\n        swipe \u6ed1\u52a8\n\n        Args:\n            points (list): [(x,y),(x,y),(x,y)] \u5750\u6807\u5217\u8868\n            duration (int): \u6301\u7eed\u65f6\u95f4. Defaults to 300.\n        \"\"\"\n</code></pre>"},{"location":"touch/#minidevice.touch.Touch.click","title":"<code>click(x, y, duration=100)</code>","text":"<p>click \u70b9\u51fb</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>\u6a2a\u5750\u6807</p> required <code>y</code> <code>int</code> <p>\u7eb5\u5750\u6807</p> required <code>duration</code> <code>int</code> <p>\u6301\u7eed\u65f6\u95f4. Defaults to 100.</p> <code>100</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\touch.py</code> <pre><code>@abstractclassmethod\ndef click(self, x: int, y: int, duration: int = 100):\n\"\"\"\n    click \u70b9\u51fb\n\n    Args:\n        x (int): \u6a2a\u5750\u6807\n        y (int): \u7eb5\u5750\u6807\n        duration (int, optional): \u6301\u7eed\u65f6\u95f4. Defaults to 100.\n    \"\"\"\n</code></pre>"},{"location":"touch/#minidevice.touch.Touch.swipe","title":"<code>swipe(points, duration=300)</code>","text":"<p>swipe \u6ed1\u52a8</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list</code> <p>[(x,y),(x,y),(x,y)] \u5750\u6807\u5217\u8868</p> required <code>duration</code> <code>int</code> <p>\u6301\u7eed\u65f6\u95f4. Defaults to 300.</p> <code>300</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\touch.py</code> <pre><code>@abstractclassmethod\ndef swipe(self, points: list, duration: int = 300):\n\"\"\"\n    swipe \u6ed1\u52a8\n\n    Args:\n        points (list): [(x,y),(x,y),(x,y)] \u5750\u6807\u5217\u8868\n        duration (int): \u6301\u7eed\u65f6\u95f4. Defaults to 300.\n    \"\"\"\n</code></pre>"},{"location":"touch/#minidevice.minitouch.Minitouch","title":"<code>Minitouch</code>","text":"<p>         Bases: <code>Touch</code>, <code>MNTDevice</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\minitouch.py</code> <pre><code>class Minitouch(Touch, MNTDevice):\n    def __init__(self, device):\n\"\"\"\n        __init__ minitouch\u70b9\u51fb\u65b9\u5f0f\n\n        Args:\n            device (str): \u8bbe\u5907id\n        \"\"\"\n        self.minitouch_adb = ADB(device)\n        self.__get_device_info()\n        self.__minitouch_install()\n        MNTDevice.__init__(self, device)\n\n    def __get_device_info(self):\n        self.abi = self.minitouch_adb.get_abi()\n\n    def __minitouch_install(self):\n        MNT_HOME = \"/data/local/tmp/minitouch\"\n        self.minitouch_adb.push_file(f\"{MINITOUCH_PATH}/{self.abi}/minitouch\", MNT_HOME)\n        self.minitouch_adb.change_file_permission(\"+x\", MNT_HOME)\n\n    def click(self, x: int, y: int, duration: int = 100):\n        MNTDevice.tap(self, [(x, y)], duration=duration)\n        logger.debug(f\"minitouch click ({x},{y}) consume:{duration}ms\")\n\n    def swipe(self, points: list, duration: int = 300):\n        MNTDevice.swipe(self, points, duration=duration)\n        logger.debug(\n            f\"minitouch swipe from ({points[0]}) to ({points[-1]}) consume:{duration}ms\"\n        )\n\n    def __del__(self):\n        MNTDevice.stop(self)\n</code></pre>"},{"location":"touch/#minidevice.minitouch.Minitouch.__init__","title":"<code>__init__(device)</code>","text":"<p>init minitouch\u70b9\u51fb\u65b9\u5f0f</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>\u8bbe\u5907id</p> required Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\minitouch.py</code> <pre><code>def __init__(self, device):\n\"\"\"\n    __init__ minitouch\u70b9\u51fb\u65b9\u5f0f\n\n    Args:\n        device (str): \u8bbe\u5907id\n    \"\"\"\n    self.minitouch_adb = ADB(device)\n    self.__get_device_info()\n    self.__minitouch_install()\n    MNTDevice.__init__(self, device)\n</code></pre>"},{"location":"touch/#minidevice.adbtouch.ADBtouch","title":"<code>ADBtouch</code>","text":"<p>         Bases: <code>Touch</code>, <code>ADB</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adbtouch.py</code> <pre><code>class ADBtouch(Touch, ADB):\n    def __init__(self, device) -&gt; None:\n\"\"\"\n        __init__ ADB \u64cd\u4f5c\u65b9\u5f0f\n\n        Args:\n            device (str): \u8bbe\u5907id\n        \"\"\"\n        ADB.__init__(self, device=device)\n\n    def click(self, x: int, y: int, duration: int = 100):\n        ADB.click(self, x, y, duration)\n        logger.debug(f\"ADB click ({x},{y}) consume:{duration}ms\")\n\n    def swipe(self, points: list, duration: int = 300):\n        start_x, start_y = points[0]\n        end_x, end_y = points[-1]\n        ADB.swipe(self, start_x, start_y, end_x, end_y, duration)\n        logger.debug(\n            f\"ADB swipe from ({points[0]}) to ({points[-1]}) consume:{duration}ms\"\n        )\n</code></pre>"},{"location":"touch/#minidevice.adbtouch.ADBtouch.__init__","title":"<code>__init__(device)</code>","text":"<p>init ADB \u64cd\u4f5c\u65b9\u5f0f</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>\u8bbe\u5907id</p> required Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adbtouch.py</code> <pre><code>def __init__(self, device) -&gt; None:\n\"\"\"\n    __init__ ADB \u64cd\u4f5c\u65b9\u5f0f\n\n    Args:\n        device (str): \u8bbe\u5907id\n    \"\"\"\n    ADB.__init__(self, device=device)\n</code></pre>"},{"location":"touch/#minidevice.scrcpytouch.ScrcpyTouch","title":"<code>ScrcpyTouch</code>","text":"<p>         Bases: <code>Touch</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\scrcpytouch.py</code> <pre><code>class ScrcpyTouch(Touch):\n    def __init__(self, device: scrcpy.Client) -&gt; None:\n\"\"\"\n        __init__ ScrcpyCap\n\n        Args:\n            device: scrcpy.Client\n\n        \"\"\"\n        self.client = device\n\n    def click(self, x: int, y: int, duration: int = 100):\n        self.client.control.touch(x, y, scrcpy.ACTION_DOWN)\n        time.sleep(duration / 1000)\n        self.client.control.touch(x, y, scrcpy.ACTION_UP)\n\n    def swipe(self, points: list, duration: int = 300):\n        self.client.control.touch(points[0][0], points[0][1], scrcpy.ACTION_DOWN)\n        for point in points[1:-1]:\n            time.sleep(duration / (len(points) * 1000))\n            self.client.control.touch(point[0], point[1], scrcpy.ACTION_MOVE)\n        self.client.control.touch(points[-1][0], points[-1][1], scrcpy.ACTION_UP)\n</code></pre>"},{"location":"touch/#minidevice.scrcpytouch.ScrcpyTouch.__init__","title":"<code>__init__(device)</code>","text":"<p>init ScrcpyCap</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>scrcpy.Client</code> <p>scrcpy.Client</p> required Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\scrcpytouch.py</code> <pre><code>def __init__(self, device: scrcpy.Client) -&gt; None:\n\"\"\"\n    __init__ ScrcpyCap\n\n    Args:\n        device: scrcpy.Client\n\n    \"\"\"\n    self.client = device\n</code></pre>"}]}