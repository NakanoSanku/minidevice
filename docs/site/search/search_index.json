{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MiniDevice","text":"<p>\u2b50 star my  project.(~~\u7b97\u6211\u6c42\u4f60\u4e86~~)</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install minidevice\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<ul> <li>MiniDevice<ul> <li>adb</li> <li>images</li> <li>device<ul> <li>screencap<ul> <li>Minicap</li> <li>ADBcap</li> </ul> </li> <li>touch<ul> <li>Minitouch</li> <li>ADBtouch</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"#features","title":"Features","text":"\u529f\u80fd \u51fd\u6570 \u627e\u8272 Images.find_color \u627e\u8272(all) Images.find_all_colors \u591a\u70b9\u627e\u8272 Images.find_multi_colors \u627e\u56fe Images.find_image \u7279\u5f81\u5339\u914d Images.match_features <p>\u5177\u4f53\u4f7f\u7528\u53c2\u8003api\u6587\u6863\u5177\u4f53\u5185\u5bb9</p>"},{"location":"adb/","title":"adb","text":""},{"location":"adb/#minidevice.adb.ADB","title":"<code>ADB</code>","text":"Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adb.py</code> <pre><code>class ADB:\n    def __init__(self, device=None):\n        self.device = device\n\n    def adb_command(self, command: list):\n\"\"\"\u6267\u884cshell\u811a\u672c\u8bed\u53e5,\u83b7\u53d6\u8fd4\u56de\u7684\u6e90\u6570\u636e\"\"\"\n        adb_command = [ADB_PATH]\n        if self.device:\n            adb_command.extend([\"-s\", self.device])\n        adb_command.extend(command)\n        try:\n            process = subprocess.Popen(\n                adb_command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL\n            )\n            data, err = process.communicate(timeout=10)\n            if process.returncode == 0:\n                return data\n            else:\n                logger.error(\"\\nADB\u547d\u4ee4\u6267\u884c\u5931\u8d25\\n\u62a5\u9519\u4fe1\u606f:{}\".format(err))\n        except FileNotFoundError:\n            logger.error(\"ADB\u4e0d\u5b58\u5728\u6216\u65e0\u6cd5\u6267\u884c\")\n        except subprocess.TimeoutExpired:\n            logger.error(\"ADB\u547d\u4ee4\u6267\u884c\u8d85\u65f6\")\n\n    def _run_adb_command(self, command: list):\n        adb_command = [ADB_PATH]\n        if self.device:\n            adb_command.extend([\"-s\", self.device])\n        adb_command.extend(command)\n        try:\n            result = subprocess.run(adb_command, capture_output=True, text=True)\n            if result.returncode != 0:\n                raise Exception(\"\\nADB\u547d\u4ee4\u6267\u884c\u5931\u8d25\\n\u62a5\u9519\u4fe1\u606f:{}\".format(result.stderr))\n            return result.stdout\n        except subprocess.CalledProcessError as e:\n            # \u6267\u884c\u5931\u8d25\uff0c\u5904\u7406\u5f02\u5e38\u60c5\u51b5\n            logger.error(f\"\u547d\u4ee4\u6267\u884c\u5931\u8d25\\n\u8fd4\u56de\u7801:, {e.returncode}\\n\u6807\u51c6\u9519\u8bef:{e.stderr}\")\n        except subprocess.TimeoutExpired as e:\n            # \u547d\u4ee4\u6267\u884c\u8d85\u65f6\uff0c\u5904\u7406\u8d85\u65f6\u60c5\u51b5\n            logger.error(\"\u547d\u4ee4\u6267\u884c\u8d85\u65f6\")\n\n    def forward_port(self, server, port=None) -&gt; int:\n        while True:\n            localport = random.randint(11111, 20000) if port is None else port\n            local = \"tcp:{}\".format(localport)\n            result = self._run_adb_command([\"forward\", local, server])\n            if result.split(\":\")[-1] != \"\":\n                return int(result.split(\":\")[-1])\n            else:\n                if port is not None:\n                    self.remove_forward(port)\n\n    def remove_forward(self, port):\n        self._run_adb_command([\"forward\", \"--remove\", \"tcp:{}\".format(port)])\n\n    @staticmethod\n    def list_forward_port():\n        output = subprocess.run(\n            [ADB_PATH, \"forward\", \"--list\"], capture_output=True, text=True\n        )\n        list_port = output.stdout.split(\"\\n\")[:-2]\n        return list_port\n\n    def get_version(self):\n        output = self._run_adb_command([\"version\"])\n        return output.strip()\n\n    def start_server(self):\n        self._run_adb_command([\"start-server\"])\n\n    def stop_server(self):\n        self._run_adb_command([\"kill-server\"])\n\n    def enable_root(self):\n        self._run_adb_command([\"root\"])\n\n    def set_port(self, port):\n        self._run_adb_command([\"tcpip\", str(port)])\n\n    def clean_forward(self):\n        self._run_adb_command([\"forward\", \"--remove-all\"])\n\n    @staticmethod\n    def list_devices():\n        output = ADB._run_adb_command(ADB(), [\"devices\"])\n        devices = output.split(\"\\n\")[1:]\n        devices = [device.split(\"\\t\")[0] for device in devices if device.strip()]\n        return devices\n\n    @staticmethod\n    def list_devices_info():\n        output = ADB._run_adb_command(ADB(), [\"devices\", \"-l\"])\n        devices = output.split(\"\\n\")[1:]\n        devices = [device.split(\"\\t\")[0] for device in devices if device.strip()]\n        status = [device.split(\"\\t\")[1] for device in devices if device.strip()]\n        remark = [device.split(\"\\t\")[2] for device in devices if device.strip()]\n        return list(zip(devices, status, remark))\n\n    def install_apk(self, apk_path):\n        self._run_adb_command([\"install\", apk_path])\n\n    def uninstall_app(self, package_name, save_data=False):\n        adb_command = (\n            [\"uninstall\", \"-k\", package_name]\n            if save_data\n            else [\"uninstall\", package_name]\n        )\n        self._run_adb_command(adb_command)\n\n    def clear_app_data(self, package_name):\n        self._run_adb_command([\"shell\", \"pm\", \"clear\", package_name])\n\n    def list_apps(self, system=False, third_party=False, package_name_contains=None):\n        command = [\"shell\", \"pm\", \"list\", \"packages\"]\n        if system:\n            command.append(\"-s\")\n        if third_party:\n            command.append(\"-3\")\n        output = self._run_adb_command(command).strip()\n        packages = output.split(\"\\n\")\n        if package_name_contains:\n            packages = [\n                package for package in packages if package_name_contains in package\n            ]\n        packages = [package.split(\":\")[-1] for package in packages]\n        return packages\n\n    def get_foreground_activity(self):\n        output = self._run_adb_command(\n            [\n                \"shell\",\n                \"dumpsys\",\n                \"activity\",\n                \"activities\",\n                \"|\",\n                \"grep\",\n                \"mResumedActivity\",\n            ]\n        )\n        return output.strip()\n\n    def get_running_services(self):\n        output = self._run_adb_command([\"shell\", \"dumpsys\", \"activity\", \"services\"])\n        return output.strip()\n\n    def get_app_info(self, package_name):\n        output = self._run_adb_command([\"shell\", \"dumpsys\", \"package\", package_name])\n        return output.strip()\n\n    def get_app_install_path(self, package_name):\n        output = self._run_adb_command([\"shell\", \"pm\", \"path\", package_name])\n        return output.strip()\n\n    def start_app(self, package_name, activity_name):\n        self._run_adb_command(\n            [\"shell\", \"am\", \"start\", \"-n\", f\"{package_name}/{activity_name}\"]\n        )\n\n    def start_service(self, package_name, service_name):\n        self._run_adb_command(\n            [\"shell\", \"am\", \"startservice\", f\"{package_name}/{service_name}\"]\n        )\n\n    def stop_service(self, package_name, service_name):\n        self._run_adb_command(\n            [\"shell\", \"am\", \"stopservice\", f\"{package_name}/{service_name}\"]\n        )\n\n    def send_broadcast(self, action):\n        self._run_adb_command([\"shell\", \"am\", \"broadcast\", \"-a\", action])\n\n    def force_stop_app(self, package_name):\n        self._run_adb_command([\"shell\", \"am\", \"force-stop\", package_name])\n\n    def trim_memory(self):\n        self._run_adb_command(\n            [\"shell\", \"am\", \"send-trim-memory\", \"org.example.package\", \"HIDDEN\"]\n        )\n\n    def pull_file(self, device_path, local_path):\n        self._run_adb_command([\"pull\", device_path, local_path])\n\n    def push_file(self, local_path, device_path):\n        self._run_adb_command([\"push\", local_path, device_path])\n\n    def press_power_button(self):\n        self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"26\"])\n\n    def press_menu_button(self):\n        self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"82\"])\n\n    def press_home_button(self):\n        self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"3\"])\n\n    def press_back_button(self):\n        self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"4\"])\n\n    def control_volume(self, direction):\n        if direction == \"up\":\n            self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"24\"])\n        elif direction == \"down\":\n            self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"25\"])\n\n    def control_media(self, action):\n        if action == \"play\":\n            self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"85\"])\n        elif action == \"pause\":\n            self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"86\"])\n        elif action == \"next\":\n            self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"87\"])\n        elif action == \"previous\":\n            self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"88\"])\n\n    def turn_on_screen(self):\n        self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"224\"])\n\n    def turn_off_screen(self):\n        self._run_adb_command([\"shell\", \"input\", \"keyevent\", \"223\"])\n\n    def swipe_unlock(self):\n        self._run_adb_command([\"shell\", \"input\", \"swipe\", \"100\", \"500\", \"500\", \"500\"])\n\n    def input_text(self, text):\n        self._run_adb_command([\"shell\", \"input\", \"text\", text])\n\n    def view_logcat(self):\n        self._run_adb_command([\"logcat\"])\n\n    def filter_logcat_by_level(self, log_level):\n        self._run_adb_command([\"logcat\", \"*:\" + log_level])\n\n    def filter_logcat_by_tag_and_level(self, tag, log_level):\n        self._run_adb_command([\"logcat\", tag + \":\" + log_level])\n\n    def set_log_format(self, log_format):\n        self._run_adb_command([\"logcat\", \"-v\", log_format])\n\n    def clear_logcat(self):\n        self._run_adb_command([\"logcat\", \"-c\"])\n\n    def view_kernel_log(self):\n        self._run_adb_command([\"shell\", \"dmesg\"])\n\n    def get_device_model(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"ro.product.model\"])\n        return output.strip()\n\n    def get_battery_status(self):\n        output = self._run_adb_command([\"shell\", \"dumpsys\", \"battery\"])\n        return str_to_dict(output.strip())\n\n    def get_screen_resolution(self):\n        output = self._run_adb_command([\"shell\", \"wm\", \"size\"])\n        return str_to_dict(output.strip())[\"Physical size\"]\n\n    def get_screen_density(self):\n        output = self._run_adb_command([\"shell\", \"wm\", \"density\"])\n        return str_to_dict(output.strip())[\"Physical density\"]\n\n    def get_display_info(self):\n        output = self._run_adb_command([\"shell\", \"dumpsys\", \"display\"])\n        return str_to_dict(output.strip())\n\n    def get_android_id(self):\n        output = self._run_adb_command(\n            [\"shell\", \"settings\", \"get\", \"secure\", \"android_id\"]\n        )\n        return output.strip()\n\n    def get_imei(self):\n        output = self._run_adb_command(\n            [\"shell\", \"service\", \"call\", \"iphonesubinfo\", \"1\"]\n        )\n        return output.strip()\n\n    def get_android_version(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"ro.build.version.release\"])\n        return output.strip()\n\n    def get_ip_address(self):\n        output = self._run_adb_command([\"shell\", \"ifconfig\", \"wlan0\"])\n        return output.strip()\n\n    def get_mac_address(self):\n        output = self._run_adb_command([\"shell\", \"cat\", \"/sys/class/net/wlan0/address\"])\n        return output.strip()\n\n    def get_cpu_info(self):\n        output = self._run_adb_command([\"shell\", \"cat\", \"/proc/cpuinfo\"])\n        return str_to_dict(output.strip())\n\n    def get_memory_info(self):\n        output = self._run_adb_command([\"shell\", \"cat\", \"/proc/meminfo\"])\n        return str_to_dict(output.strip())\n\n    def print_build_prop(self):\n        output = self._run_adb_command([\"shell\", \"cat\", \"/system/build.prop\"])\n        return output.strip()\n\n    def get_sdk(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"ro.build.version.sdk\"])\n        return int(output.strip())\n\n    def get_security_patch(self):\n        output = self._run_adb_command(\n            [\"shell\", \"getprop\", \"ro.build.version.security_patch\"]\n        )\n        return output.strip()\n\n    def get_product_brand(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"ro.product.brand\"])\n        return output.strip()\n\n    def get_product_name(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"ro.product.name\"])\n        return output.strip()\n\n    def get_product_board(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"ro.product.board\"])\n        return output.strip()\n\n    def get_product_cpu_abilist(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"ro.product.cpu.abilist\"])\n        return output.strip()\n\n    def get_abi(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"ro.product.cpu.abi\"])\n        return output.strip()\n\n    def get_isUsbOtgEnabled(self):\n        output = self._run_adb_command(\n            [\"shell\", \"getprop\", \"persist.sys.isUsbOtgEnabled\"]\n        )\n        return output.strip()\n\n    def get_heapsize(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"dalvik.vm.heapsize\"])\n        return output.strip()\n\n    def get_lcd_density(self):\n        output = self._run_adb_command([\"shell\", \"getprop\", \"ro.sf.lcd_density\"])\n        return output.strip()\n\n    def set_resolution(self, width, height):\n        self._run_adb_command([\"shell\", \"wm\", \"size\", f\"{width}x{height}\"])\n\n    def set_density(self, density):\n        self._run_adb_command([\"shell\", \"wm\", \"density\", str(density)])\n\n    def set_display_area(self, left, top, right, bottom):\n        self._run_adb_command(\n            [\"shell\", \"wm\", \"overscan\", f\"{left},{top},{right},{bottom}\"]\n        )\n\n    def disable_usb_debugging(self):\n        self._run_adb_command(\n            [\"shell\", \"settings\", \"put\", \"global\", \"adb_enabled\", \"0\"]\n        )\n\n    def allow_non_sdk_api(self):\n        self._run_adb_command(\n            [\"shell\", \"settings\", \"put\", \"global\", \"hidden_api_policy\", \"1\"]\n        )\n\n    def disable_non_sdk_api(self):\n        self._run_adb_command(\n            [\"shell\", \"settings\", \"put\", \"global\", \"hidden_api_policy\", \"0\"]\n        )\n\n    def hide_status_bar(self):\n        self._run_adb_command(\n            [\n                \"shell\",\n                \"settings\",\n                \"put\",\n                \"global\",\n                \"policy_control\",\n                \"immersive.status=*\",\n            ]\n        )\n\n    def show_status_bar(self):\n        self._run_adb_command(\n            [\"shell\", \"settings\", \"put\", \"global\", \"policy_control\", \"null\"]\n        )\n\n    def hide_navigation_bar(self):\n        self._run_adb_command(\n            [\n                \"shell\",\n                \"settings\",\n                \"put\",\n                \"global\",\n                \"policy_control\",\n                \"immersive.navigation=*\",\n            ]\n        )\n\n    def show_navigation_bar(self):\n        self._run_adb_command(\n            [\"shell\", \"settings\", \"put\", \"global\", \"policy_control\", \"null\"]\n        )\n\n    def take_screenshot(self, file_path):\n        self._run_adb_command([\"exec-out\", \"screencap\", \"-p\", \"&gt;\", file_path])\n\n    def start_screen_recording(self, file_path):\n        self._run_adb_command([\"shell\", \"screenrecord\", file_path])\n\n    def remount_system_partition(self):\n        self._run_adb_command([\"shell\", \"mount\", \"-o\", \"remount,rw\", \"/system\"])\n\n    def get_wifi_password(self, ssid):\n        output = self._run_adb_command(\n            [\n                \"shell\",\n                \"su\",\n                \"-c\",\n                f'cat /data/misc/wifi/wpa_supplicant.conf | grep -A 4 \"ssid=\\\\\"{ssid}\\\\\"\"',\n            ]\n        )\n        return output.strip()\n\n    def set_date_time(self, date_time):\n        self._run_adb_command([\"shell\", \"su\", \"-c\", f'date -s \"{date_time}\"'])\n\n    def reboot_device(self):\n        self._run_adb_command([\"shell\", \"su\", \"-c\", \"reboot\"])\n\n    def check_root_status(self):\n        output = self._run_adb_command([\"shell\", \"su\", \"-c\", \"id\"])\n        if \"root\" in output.strip():\n            return True\n        else:\n            return False\n\n    def enable_monkey_stress_test(self):\n        self._run_adb_command([\"shell\", \"settings\", \"put\", \"global\", \"monkey\", \"0\"])\n\n    def disable_monkey_stress_test(self):\n        self._run_adb_command([\"shell\", \"settings\", \"put\", \"global\", \"monkey\", \"1\"])\n\n    def enable_wifi(self):\n        self._run_adb_command([\"shell\", \"svc\", \"wifi\", \"enable\"])\n\n    def disable_wifi(self):\n        self._run_adb_command([\"shell\", \"svc\", \"wifi\", \"disable\"])\n\n    def reboot_recovery(self):\n        self._run_adb_command([\"reboot\", \"recovery\"])\n\n    def reboot_android(self):\n        self._run_adb_command([\"reboot\"])\n\n    def reboot_fastboot(self):\n        self._run_adb_command([\"reboot\", \"bootloader\"])\n\n    def sideload_update(self, update_zip_path):\n        self._run_adb_command([\"sideload\", update_zip_path])\n\n    def enable_selinux(self):\n        self._run_adb_command([\"shell\", \"setenforce\", \"1\"])\n\n    def disable_selinux(self):\n        self._run_adb_command([\"shell\", \"setenforce\", \"0\"])\n\n    def enable_dm_verity(self):\n        self._run_adb_command(\n            [\"shell\", \"su\", \"-c\", \"setprop\", \"verity.mode\", \"enforcing\"]\n        )\n\n    def disable_dm_verity(self):\n        self._run_adb_command(\n            [\"shell\", \"su\", \"-c\", \"setprop\", \"verity.mode\", \"disabled\"]\n        )\n\n    def swipe(self, start_x, start_y, end_x, end_y, duration=250):\n        adb_command = [\"shell\", \"input\", \"touchscreen\", \"swipe\"]\n        adb_command.extend(\n            [str(start_x), str(start_y), str(end_x), str(end_y), str(duration)]\n        )\n        self._run_adb_command(adb_command)\n\n    def click(self, x: int, y: int, duration=150):\n        adb_command = [\"shell\", \"input\", \"touchscreen\", \"swipe\"]\n        adb_command.extend([str(x), str(y), str(x), str(y), str(duration)])\n        self._run_adb_command(adb_command)\n\n    def change_file_permission(self, permission, file_path):\n        self._run_adb_command([\"shell\", \"chmod\", permission, file_path])\n\n    def check_disk_space(self):\n        output = self._run_adb_command([\"shell\", \"df\"])\n        return output.strip()\n\n    def kill_process(self, pid):\n        self._run_adb_command([\"shell\", \"kill\", str(pid)])\n\n    def list_directory_contents(self, directory):\n        output = self._run_adb_command([\"shell\", \"ls\", \"-la\", directory])\n        return output.strip()\n\n    def move_file(self, source_path, destination_path):\n        self._run_adb_command([\"shell\", \"mv\", source_path, destination_path])\n\n    def view_running_processes(self):\n        output = self._run_adb_command([\"shell\", \"ps\"])\n        return output.strip()\n\n    def remove_file(self, file_path):\n        self._run_adb_command([\"shell\", \"rm\", \"-rf\", file_path])\n\n    def view_top_processes(self):\n        output = self._run_adb_command([\"shell\", \"top\", \"-n\", \"1\"])\n        return output.strip()\n\n    def get_service_list(self):\n        output = self._run_adb_command([\"shell\", \"service\", \"list\"])\n        return output.strip()\n\n    def get_iomem(self):\n        output = self._run_adb_command([\"shell\", \"cat\", \"/proc/iomem\"])\n        return output.strip()\n\n    def get_procrank(self):\n        output = self._run_adb_command([\"shell\", \"procrank\"])\n        return output.strip()\n\n    def screencap_raw(self):\n\"\"\"\u83b7\u53d6\u622a\u56fe\u6e90\u6570\u636e\"\"\"\n        return self.adb_command([\"exec-out\", \"screencap\", \"-p\"])\n</code></pre>"},{"location":"adb/#minidevice.adb.ADB.adb_command","title":"<code>adb_command(command)</code>","text":"<p>\u6267\u884cshell\u811a\u672c\u8bed\u53e5,\u83b7\u53d6\u8fd4\u56de\u7684\u6e90\u6570\u636e</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adb.py</code> <pre><code>def adb_command(self, command: list):\n\"\"\"\u6267\u884cshell\u811a\u672c\u8bed\u53e5,\u83b7\u53d6\u8fd4\u56de\u7684\u6e90\u6570\u636e\"\"\"\n    adb_command = [ADB_PATH]\n    if self.device:\n        adb_command.extend([\"-s\", self.device])\n    adb_command.extend(command)\n    try:\n        process = subprocess.Popen(\n            adb_command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL\n        )\n        data, err = process.communicate(timeout=10)\n        if process.returncode == 0:\n            return data\n        else:\n            logger.error(\"\\nADB\u547d\u4ee4\u6267\u884c\u5931\u8d25\\n\u62a5\u9519\u4fe1\u606f:{}\".format(err))\n    except FileNotFoundError:\n        logger.error(\"ADB\u4e0d\u5b58\u5728\u6216\u65e0\u6cd5\u6267\u884c\")\n    except subprocess.TimeoutExpired:\n        logger.error(\"ADB\u547d\u4ee4\u6267\u884c\u8d85\u65f6\")\n</code></pre>"},{"location":"adb/#minidevice.adb.ADB.screencap_raw","title":"<code>screencap_raw()</code>","text":"<p>\u83b7\u53d6\u622a\u56fe\u6e90\u6570\u636e</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adb.py</code> <pre><code>def screencap_raw(self):\n\"\"\"\u83b7\u53d6\u622a\u56fe\u6e90\u6570\u636e\"\"\"\n    return self.adb_command([\"exec-out\", \"screencap\", \"-p\"])\n</code></pre>"},{"location":"adb/#minidevice.adb.ADBcap","title":"<code>ADBcap</code>","text":"<p>         Bases: <code>ScreenCap</code>, <code>ADB</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adb.py</code> <pre><code>class ADBcap(ScreenCap, ADB):\n    def __init__(self, device=None) -&gt; None:\n        ADB.__init__(self, device=device)\n\n    def screencap_raw(self) -&gt; bytes:\n\"\"\"\n        screencap_raw ADB\u622a\u56fe\n\n        Returns:\n            \u56fe\u50cf\u5b57\u8282\u6d41 (bytes): \n        \"\"\"\n        logger.debug(f\"screen by ADB\")\n        return ADB.screencap_raw(self)\n</code></pre>"},{"location":"adb/#minidevice.adb.ADBcap.screencap_raw","title":"<code>screencap_raw()</code>","text":"<p>screencap_raw ADB\u622a\u56fe</p> <p>Returns:</p> Name Type Description <code>\u56fe\u50cf\u5b57\u8282\u6d41</code> <code>bytes</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adb.py</code> <pre><code>def screencap_raw(self) -&gt; bytes:\n\"\"\"\n    screencap_raw ADB\u622a\u56fe\n\n    Returns:\n        \u56fe\u50cf\u5b57\u8282\u6d41 (bytes): \n    \"\"\"\n    logger.debug(f\"screen by ADB\")\n    return ADB.screencap_raw(self)\n</code></pre>"},{"location":"adb/#minidevice.adb.ADBtouch","title":"<code>ADBtouch</code>","text":"<p>         Bases: <code>Touch</code>, <code>ADB</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adb.py</code> <pre><code>class ADBtouch(Touch, ADB):\n    def __init__(self, device=None) -&gt; None:\n        ADB.__init__(self, device=device)\n\n    def click(self, x: int, y: int, duration: int = 100):\n\"\"\"\n        click ADB \u70b9\u51fb\n\n        Args:\n            x (int): \u6a2a\u5750\u6807\n            y (int): \u7eb5\u5750\u6807\n            duration (int, optional): \u6301\u7eed\u65f6\u95f4. Defaults to 100.\n        \"\"\"\n        ADB.click(self, x, y, duration)\n        logger.debug(f\"ADB click ({x},{y}) consume:{duration}ms\")\n\n    def swipe(self, points: list, duration: int = 300):\n\"\"\"\n        swipe \u6ed1\u52a8\n\n        Args:\n            points (list): [(x,y),(x,y)] \u5750\u6807\u5217\u8868\n            duration (int): \u6301\u7eed\u65f6\u95f4. Defaults to 300.\n        \"\"\"\n        start_x, start_y = points[0]\n        end_x, end_y = points[-1]\n        ADB.swipe(self, start_x, start_y, end_x, end_y, duration)\n        logger.debug(f\"ADB swipe from ({points[0]}) to ({points[-1]}) consume:{duration}ms\")\n</code></pre>"},{"location":"adb/#minidevice.adb.ADBtouch.click","title":"<code>click(x, y, duration=100)</code>","text":"<p>click ADB \u70b9\u51fb</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>\u6a2a\u5750\u6807</p> required <code>y</code> <code>int</code> <p>\u7eb5\u5750\u6807</p> required <code>duration</code> <code>int</code> <p>\u6301\u7eed\u65f6\u95f4. Defaults to 100.</p> <code>100</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adb.py</code> <pre><code>def click(self, x: int, y: int, duration: int = 100):\n\"\"\"\n    click ADB \u70b9\u51fb\n\n    Args:\n        x (int): \u6a2a\u5750\u6807\n        y (int): \u7eb5\u5750\u6807\n        duration (int, optional): \u6301\u7eed\u65f6\u95f4. Defaults to 100.\n    \"\"\"\n    ADB.click(self, x, y, duration)\n    logger.debug(f\"ADB click ({x},{y}) consume:{duration}ms\")\n</code></pre>"},{"location":"adb/#minidevice.adb.ADBtouch.swipe","title":"<code>swipe(points, duration=300)</code>","text":"<p>swipe \u6ed1\u52a8</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list</code> <p>[(x,y),(x,y)] \u5750\u6807\u5217\u8868</p> required <code>duration</code> <code>int</code> <p>\u6301\u7eed\u65f6\u95f4. Defaults to 300.</p> <code>300</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\adb.py</code> <pre><code>def swipe(self, points: list, duration: int = 300):\n\"\"\"\n    swipe \u6ed1\u52a8\n\n    Args:\n        points (list): [(x,y),(x,y)] \u5750\u6807\u5217\u8868\n        duration (int): \u6301\u7eed\u65f6\u95f4. Defaults to 300.\n    \"\"\"\n    start_x, start_y = points[0]\n    end_x, end_y = points[-1]\n    ADB.swipe(self, start_x, start_y, end_x, end_y, duration)\n    logger.debug(f\"ADB swipe from ({points[0]}) to ({points[-1]}) consume:{duration}ms\")\n</code></pre>"},{"location":"images/","title":"images","text":""},{"location":"images/#minidevice.images.Colors","title":"<code>Colors</code>","text":"Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>class Colors:\n    BLACK = \"#FF000000\"  # \u9ed1\u8272\n    DKGRAY = \"#FF444444\"  # \u6df1\u7070\u8272\n    GRAY = \"#FF888888\"  # \u7070\u8272\n    LTGRAY = \"#FFCCCCCC\"  # \u4eae\u7070\u8272\n    WHITE = \"#FFFFFFFF\"  # \u767d\u8272\n    RED = \"#FFFF0000\"  # \u7ea2\u8272\n    GREEN = \"#FF00FF00\"  # \u7eff\u8272\n    BLUE = \"#FF0000FF\"  # \u84dd\u8272\n    YELLOW = \"#FFFFFF00\"  # \u9ec4\u8272\n    CYAN = \"#FF00FFFF\"  # \u9752\u8272\n    MAGENTA = \"#FFFF00FF\"  # \u54c1\u7ea2\u8272\n    TRANSPARENT = \"#00000000\"  # \u900f\u660e\n\n    def to_string(color):\n\"\"\"\n        to_string 16\u8fdb\u5236\u8f6c\u989c\u8272\u503c\u7684\u5b57\u7b26\u4e32\n\n        Args:\n            color (int): 0xFF112233\n\n        Returns:\n            str: \u8fd4\u56de\u989c\u8272\u503c\u7684\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a \"#AARRGGBB\"\u3002\n        \"\"\"\n        # \u5c06\u6574\u6570RGB\u989c\u8272\u503c\u8f6c\u6362\u4e3a16\u8fdb\u5236\u5b57\u7b26\u4e32\n        hex_color = hex(color)[2:].upper().zfill(8)\n        # \u5c0616\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\"AARRGGBB\"\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\n        a, r, g, b = [hex_color[i : i + 2] for i in range(0, 8, 2)]\n        return f\"#{a}{r}{g}{b}\"\n\n    def get_red(color):\n\"\"\"\n        get_red \u8fd4\u56de\u989c\u8272color\u7684R\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n\n        Args:\n            color (int): 0xFF112233\n\n        Returns:\n            int: \u8fd4\u56de\u989c\u8272color\u7684R\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n        \"\"\"\n        # \u53f3\u79fb24\u4f4d\u83b7\u53d6\u7ea2\u8272\u901a\u9053\u7684\u503c\n        red = (color &gt;&gt; 16) &amp; 0xFF\n        return red\n\n    def get_green(color):\n\"\"\"\n        get_green \u8fd4\u56de\u989c\u8272color\u7684g\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n\n        Args:\n            color (int): 0xFF112233\n\n        Returns:\n            int: \u989c\u8272color\u7684g\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n        \"\"\"\n        # \u53f3\u79fb24\u4f4d\u83b7\u53d6\u7eff\u8272\u901a\u9053\u7684\u503c\n        green = (color &gt;&gt; 8) &amp; 0xFF\n        return green\n\n    def get_blue(color):\n\"\"\"\n        get_blue \u8fd4\u56de\u989c\u8272color\u7684b\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n\n        Args:\n            color (int): 0xFF112233\n\n        Returns:\n            int: \u989c\u8272color\u7684b\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n        \"\"\"\n        # \u53f3\u79fb24\u4f4d\u83b7\u53d6\u84dd\u8272\u901a\u9053\u7684\u503c\n        blue = (color &gt;&gt; 0) &amp; 0xFF\n        return blue\n\n    def is_similar(color1, color2, threshold=4, algorithm=\"diff\"):\n\"\"\"\n        is_similar \u8fd4\u56de\u4e24\u4e2a\u989c\u8272\u662f\u5426\u76f8\u4f3c\n        Args:\n            color1 (int): 16\u8fdb\u5236\u989c\u8272\u503c\n            color2 (int): 16\u8fdb\u5236\u989c\u8272\u503c\n            threshold (int, optional): \u76f8\u4f3c\u5ea6. Defaults to 4.\n            algorithm (str, optional): \u6bd4\u8f83\u7b97\u6cd5. Defaults to 'diff'.\n                algorithm\u5305\u62ec:\n                    \"diff\": \u5dee\u503c\u5339\u914d\u3002\u4e0e\u7ed9\u5b9a\u989c\u8272\u7684R\u3001G\u3001B\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\u5c0f\u4e8ethreshold\u65f6\u5339\u914d\u3002\n                    \"rgb\": rgb\u6b27\u62c9\u8ddd\u79bb\u76f8\u4f3c\u5ea6\u3002\u4e0e\u7ed9\u5b9a\u989c\u8272color\u7684rgb\u6b27\u62c9\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8ethreshold\u65f6\u5339\u914d\u3002\n                    \"rgb+\": \u52a0\u6743rgb\u6b27\u62c9\u8ddd\u79bb\u5339\u914d(LAB Delta E)\u3002\n                    \"hs\": hs\u6b27\u62c9\u8ddd\u79bb\u5339\u914d\u3002hs\u4e3aHSV\u7a7a\u95f4\u7684\u8272\u8c03\u503c\u3002\n        - Returns:\n            bool: \u8fd4\u56de\u4e24\u4e2a\u989c\u8272\u662f\u5426\u76f8\u4f3c\n        \"\"\"\n        # \u5dee\u503c\u5339\u914d\u7b97\u6cd5\n        if algorithm == \"diff\":\n            r1 = (color1 &gt;&gt; 16) &amp; 0xFF\n            g1 = (color1 &gt;&gt; 8) &amp; 0xFF\n            b1 = color1 &amp; 0xFF\n            r2 = (color2 &gt;&gt; 16) &amp; 0xFF\n            g2 = (color2 &gt;&gt; 8) &amp; 0xFF\n            b2 = color2 &amp; 0xFF\n            diff = abs(r1 - r2) + abs(g1 - g2) + abs(b1 - b2)\n            return diff &lt;= threshold\n        # RGB\u6b27\u62c9\u8ddd\u79bb\u76f8\u4f3c\u5ea6\u7b97\u6cd5\n        elif algorithm == \"rgb\":\n            r1 = (color1 &gt;&gt; 16) &amp; 0xFF\n            g1 = (color1 &gt;&gt; 8) &amp; 0xFF\n            b1 = color1 &amp; 0xFF\n            r2 = (color2 &gt;&gt; 16) &amp; 0xFF\n            g2 = (color2 &gt;&gt; 8) &amp; 0xFF\n            b2 = color2 &amp; 0xFF\n            diff = math.sqrt(pow(r1 - r2, 2) + pow(g1 - g2, 2) + pow(b1 - b2, 2))\n            return diff &lt;= threshold\n        # \u52a0\u6743RGB\u6b27\u62c9\u8ddd\u79bb\u76f8\u4f3c\u5ea6\u7b97\u6cd5\n        elif algorithm == \"rgb+\":\n            lab1 = rgb2lab(color1)\n            lab2 = rgb2lab(color2)\n            diff = deltaE(lab1, lab2)\n            return diff &lt;= threshold\n        # HS\u6b27\u62c9\u8ddd\u79bb\u76f8\u4f3c\u5ea6\u7b97\u6cd5\n        elif algorithm == \"hs\":\n            hs1 = rgb2hs(color1)\n            hs2 = rgb2hs(color2)\n            diff = math.sqrt(pow(hs1[0] - hs2[0], 2) + pow(hs1[1] - hs2[1], 2))\n            return diff &lt;= threshold\n        else:\n            return False\n\n    def parse_color(color_str):\n\"\"\"\n        parse_color \u89e3\u6790\u989c\u8272\u503c\u4e3a16\u8fdb\u5236\n\n        Args:\n            color_str (str): \"#112233\"\n\n        Returns:\n            int: 16\u8fdb\u5236\u989c\u8272\u503c\n        \"\"\"\n        color_str = color_str.strip(\"#\")  # \u79fb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u7684 \"#\"\n        red = int(color_str[0:2], 16)  # \u63d0\u53d6\u7ea2\u8272\u5206\u91cf\u5e76\u8f6c\u6362\u4e3a\u6574\u6570\n        green = int(color_str[2:4], 16)  # \u63d0\u53d6\u7eff\u8272\u5206\u91cf\u5e76\u8f6c\u6362\u4e3a\u6574\u6570\n        blue = int(color_str[4:6], 16)  # \u63d0\u53d6\u84dd\u8272\u5206\u91cf\u5e76\u8f6c\u6362\u4e3a\u6574\u6570\n        color_value = (red &lt;&lt; 16) + (green &lt;&lt; 8) + blue  # \u5c06\u5206\u91cf\u7ec4\u5408\u4e3a\u6574\u6570\u503c\n        return color_value\n</code></pre>"},{"location":"images/#minidevice.images.Colors.get_blue","title":"<code>get_blue(color)</code>","text":"<p>get_blue \u8fd4\u56de\u989c\u8272color\u7684b\u901a\u9053\u7684\u503c,\u8303\u56f40~255.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>int</code> <p>0xFF112233</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>\u989c\u8272color\u7684b\u901a\u9053\u7684\u503c,\u8303\u56f40~255.</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def get_blue(color):\n\"\"\"\n    get_blue \u8fd4\u56de\u989c\u8272color\u7684b\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n\n    Args:\n        color (int): 0xFF112233\n\n    Returns:\n        int: \u989c\u8272color\u7684b\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n    \"\"\"\n    # \u53f3\u79fb24\u4f4d\u83b7\u53d6\u84dd\u8272\u901a\u9053\u7684\u503c\n    blue = (color &gt;&gt; 0) &amp; 0xFF\n    return blue\n</code></pre>"},{"location":"images/#minidevice.images.Colors.get_green","title":"<code>get_green(color)</code>","text":"<p>get_green \u8fd4\u56de\u989c\u8272color\u7684g\u901a\u9053\u7684\u503c,\u8303\u56f40~255.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>int</code> <p>0xFF112233</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>\u989c\u8272color\u7684g\u901a\u9053\u7684\u503c,\u8303\u56f40~255.</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def get_green(color):\n\"\"\"\n    get_green \u8fd4\u56de\u989c\u8272color\u7684g\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n\n    Args:\n        color (int): 0xFF112233\n\n    Returns:\n        int: \u989c\u8272color\u7684g\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n    \"\"\"\n    # \u53f3\u79fb24\u4f4d\u83b7\u53d6\u7eff\u8272\u901a\u9053\u7684\u503c\n    green = (color &gt;&gt; 8) &amp; 0xFF\n    return green\n</code></pre>"},{"location":"images/#minidevice.images.Colors.get_red","title":"<code>get_red(color)</code>","text":"<p>get_red \u8fd4\u56de\u989c\u8272color\u7684R\u901a\u9053\u7684\u503c,\u8303\u56f40~255.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>int</code> <p>0xFF112233</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>\u8fd4\u56de\u989c\u8272color\u7684R\u901a\u9053\u7684\u503c,\u8303\u56f40~255.</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def get_red(color):\n\"\"\"\n    get_red \u8fd4\u56de\u989c\u8272color\u7684R\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n\n    Args:\n        color (int): 0xFF112233\n\n    Returns:\n        int: \u8fd4\u56de\u989c\u8272color\u7684R\u901a\u9053\u7684\u503c,\u8303\u56f40~255.\n    \"\"\"\n    # \u53f3\u79fb24\u4f4d\u83b7\u53d6\u7ea2\u8272\u901a\u9053\u7684\u503c\n    red = (color &gt;&gt; 16) &amp; 0xFF\n    return red\n</code></pre>"},{"location":"images/#minidevice.images.Colors.is_similar","title":"<code>is_similar(color1, color2, threshold=4, algorithm='diff')</code>","text":"<p>is_similar \u8fd4\u56de\u4e24\u4e2a\u989c\u8272\u662f\u5426\u76f8\u4f3c</p> <p>Parameters:</p> Name Type Description Default <code>color1</code> <code>int</code> <p>16\u8fdb\u5236\u989c\u8272\u503c</p> required <code>color2</code> <code>int</code> <p>16\u8fdb\u5236\u989c\u8272\u503c</p> required <code>threshold</code> <code>int</code> <p>\u76f8\u4f3c\u5ea6. Defaults to 4.</p> <code>4</code> <code>algorithm</code> <code>str</code> <p>\u6bd4\u8f83\u7b97\u6cd5. Defaults to 'diff'. algorithm\u5305\u62ec:     \"diff\": \u5dee\u503c\u5339\u914d\u3002\u4e0e\u7ed9\u5b9a\u989c\u8272\u7684R\u3001G\u3001B\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\u5c0f\u4e8ethreshold\u65f6\u5339\u914d\u3002     \"rgb\": rgb\u6b27\u62c9\u8ddd\u79bb\u76f8\u4f3c\u5ea6\u3002\u4e0e\u7ed9\u5b9a\u989c\u8272color\u7684rgb\u6b27\u62c9\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8ethreshold\u65f6\u5339\u914d\u3002     \"rgb+\": \u52a0\u6743rgb\u6b27\u62c9\u8ddd\u79bb\u5339\u914d(LAB Delta E)\u3002     \"hs\": hs\u6b27\u62c9\u8ddd\u79bb\u5339\u914d\u3002hs\u4e3aHSV\u7a7a\u95f4\u7684\u8272\u8c03\u503c\u3002</p> <code>'diff'</code> <ul> <li>Returns:     bool: \u8fd4\u56de\u4e24\u4e2a\u989c\u8272\u662f\u5426\u76f8\u4f3c</li> </ul> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def is_similar(color1, color2, threshold=4, algorithm=\"diff\"):\n\"\"\"\n    is_similar \u8fd4\u56de\u4e24\u4e2a\u989c\u8272\u662f\u5426\u76f8\u4f3c\n    Args:\n        color1 (int): 16\u8fdb\u5236\u989c\u8272\u503c\n        color2 (int): 16\u8fdb\u5236\u989c\u8272\u503c\n        threshold (int, optional): \u76f8\u4f3c\u5ea6. Defaults to 4.\n        algorithm (str, optional): \u6bd4\u8f83\u7b97\u6cd5. Defaults to 'diff'.\n            algorithm\u5305\u62ec:\n                \"diff\": \u5dee\u503c\u5339\u914d\u3002\u4e0e\u7ed9\u5b9a\u989c\u8272\u7684R\u3001G\u3001B\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\u5c0f\u4e8ethreshold\u65f6\u5339\u914d\u3002\n                \"rgb\": rgb\u6b27\u62c9\u8ddd\u79bb\u76f8\u4f3c\u5ea6\u3002\u4e0e\u7ed9\u5b9a\u989c\u8272color\u7684rgb\u6b27\u62c9\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8ethreshold\u65f6\u5339\u914d\u3002\n                \"rgb+\": \u52a0\u6743rgb\u6b27\u62c9\u8ddd\u79bb\u5339\u914d(LAB Delta E)\u3002\n                \"hs\": hs\u6b27\u62c9\u8ddd\u79bb\u5339\u914d\u3002hs\u4e3aHSV\u7a7a\u95f4\u7684\u8272\u8c03\u503c\u3002\n    - Returns:\n        bool: \u8fd4\u56de\u4e24\u4e2a\u989c\u8272\u662f\u5426\u76f8\u4f3c\n    \"\"\"\n    # \u5dee\u503c\u5339\u914d\u7b97\u6cd5\n    if algorithm == \"diff\":\n        r1 = (color1 &gt;&gt; 16) &amp; 0xFF\n        g1 = (color1 &gt;&gt; 8) &amp; 0xFF\n        b1 = color1 &amp; 0xFF\n        r2 = (color2 &gt;&gt; 16) &amp; 0xFF\n        g2 = (color2 &gt;&gt; 8) &amp; 0xFF\n        b2 = color2 &amp; 0xFF\n        diff = abs(r1 - r2) + abs(g1 - g2) + abs(b1 - b2)\n        return diff &lt;= threshold\n    # RGB\u6b27\u62c9\u8ddd\u79bb\u76f8\u4f3c\u5ea6\u7b97\u6cd5\n    elif algorithm == \"rgb\":\n        r1 = (color1 &gt;&gt; 16) &amp; 0xFF\n        g1 = (color1 &gt;&gt; 8) &amp; 0xFF\n        b1 = color1 &amp; 0xFF\n        r2 = (color2 &gt;&gt; 16) &amp; 0xFF\n        g2 = (color2 &gt;&gt; 8) &amp; 0xFF\n        b2 = color2 &amp; 0xFF\n        diff = math.sqrt(pow(r1 - r2, 2) + pow(g1 - g2, 2) + pow(b1 - b2, 2))\n        return diff &lt;= threshold\n    # \u52a0\u6743RGB\u6b27\u62c9\u8ddd\u79bb\u76f8\u4f3c\u5ea6\u7b97\u6cd5\n    elif algorithm == \"rgb+\":\n        lab1 = rgb2lab(color1)\n        lab2 = rgb2lab(color2)\n        diff = deltaE(lab1, lab2)\n        return diff &lt;= threshold\n    # HS\u6b27\u62c9\u8ddd\u79bb\u76f8\u4f3c\u5ea6\u7b97\u6cd5\n    elif algorithm == \"hs\":\n        hs1 = rgb2hs(color1)\n        hs2 = rgb2hs(color2)\n        diff = math.sqrt(pow(hs1[0] - hs2[0], 2) + pow(hs1[1] - hs2[1], 2))\n        return diff &lt;= threshold\n    else:\n        return False\n</code></pre>"},{"location":"images/#minidevice.images.Colors.parse_color","title":"<code>parse_color(color_str)</code>","text":"<p>parse_color \u89e3\u6790\u989c\u8272\u503c\u4e3a16\u8fdb\u5236</p> <p>Parameters:</p> Name Type Description Default <code>color_str</code> <code>str</code> <p>\"#112233\"</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>16\u8fdb\u5236\u989c\u8272\u503c</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def parse_color(color_str):\n\"\"\"\n    parse_color \u89e3\u6790\u989c\u8272\u503c\u4e3a16\u8fdb\u5236\n\n    Args:\n        color_str (str): \"#112233\"\n\n    Returns:\n        int: 16\u8fdb\u5236\u989c\u8272\u503c\n    \"\"\"\n    color_str = color_str.strip(\"#\")  # \u79fb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u7684 \"#\"\n    red = int(color_str[0:2], 16)  # \u63d0\u53d6\u7ea2\u8272\u5206\u91cf\u5e76\u8f6c\u6362\u4e3a\u6574\u6570\n    green = int(color_str[2:4], 16)  # \u63d0\u53d6\u7eff\u8272\u5206\u91cf\u5e76\u8f6c\u6362\u4e3a\u6574\u6570\n    blue = int(color_str[4:6], 16)  # \u63d0\u53d6\u84dd\u8272\u5206\u91cf\u5e76\u8f6c\u6362\u4e3a\u6574\u6570\n    color_value = (red &lt;&lt; 16) + (green &lt;&lt; 8) + blue  # \u5c06\u5206\u91cf\u7ec4\u5408\u4e3a\u6574\u6570\u503c\n    return color_value\n</code></pre>"},{"location":"images/#minidevice.images.Colors.to_string","title":"<code>to_string(color)</code>","text":"<p>to_string 16\u8fdb\u5236\u8f6c\u989c\u8272\u503c\u7684\u5b57\u7b26\u4e32</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>int</code> <p>0xFF112233</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>\u8fd4\u56de\u989c\u8272\u503c\u7684\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a \"#AARRGGBB\"\u3002</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def to_string(color):\n\"\"\"\n    to_string 16\u8fdb\u5236\u8f6c\u989c\u8272\u503c\u7684\u5b57\u7b26\u4e32\n\n    Args:\n        color (int): 0xFF112233\n\n    Returns:\n        str: \u8fd4\u56de\u989c\u8272\u503c\u7684\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a \"#AARRGGBB\"\u3002\n    \"\"\"\n    # \u5c06\u6574\u6570RGB\u989c\u8272\u503c\u8f6c\u6362\u4e3a16\u8fdb\u5236\u5b57\u7b26\u4e32\n    hex_color = hex(color)[2:].upper().zfill(8)\n    # \u5c0616\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\"AARRGGBB\"\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\n    a, r, g, b = [hex_color[i : i + 2] for i in range(0, 8, 2)]\n    return f\"#{a}{r}{g}{b}\"\n</code></pre>"},{"location":"images/#minidevice.images.Images","title":"<code>Images</code>","text":"Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>class Images:\n    def read(path, flag=cv2.IMREAD_COLOR):\n\"\"\"\n        read \u8bfb\u53d6\u56fe\u50cf\n\n        Args:\n            path (str): \u56fe\u50cf\u8def\u5f84\n            flag (int) :\n                - cv2.IMREAD_COLOR (\u9ed8\u8ba4)\n                - cv2.IMREAD_GRAYSCALE\n\n        Returns:\n            mat: opencv\u683c\u5f0f\u56fe\u50cf\n        \"\"\"\n        return cv2.imread(path, flags=flag)\n\n    def load(path):\n\"\"\"\n        load \u52a0\u8f7d\u7f51\u7edc\u56fe\u7247\n\n        Args:\n            path (str): \u56fe\u50cf\u8def\u5f84\n\n        Returns:\n            mat: opencv\u683c\u5f0f\u56fe\u50cf\n        \"\"\"\n\n        # \u4e0b\u8f7d\u56fe\u7247\u6570\u636e\n        response = urllib.request.urlopen(path)\n        image_data = response.read()\n        return raw2opencv(image_data)\n\n    def show(img, title=\"\"):\n\"\"\"\n        show \u663e\u793a\u56fe\u50cf\n\n        Args:\n            img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n            title (str, optional): \u663e\u793a\u7684\u6807\u9898. Defaults to \"\".\n        \"\"\"\n        cv2.imshow(title, img)\n        cv2.waitKey()\n\n    def save(img, path=\"save.png\"):\n\"\"\"\n        save \u4fdd\u5b58\u56fe\u50cf\u5230\u8def\u5f84\n\n        Args:\n            path (str): \u8def\u5f84\n            img (mat): opencv\u683c\u5f0f\u56fe\u50cf \u9ed8\u8ba4\u4fdd\u5b58\u5230\u5f53\u524d\u8def\u5f84\u4e0bsave.png\n        \"\"\"\n        cv2.imwrite(path, img)\n\n    def pixel(img, x, y):\n\"\"\"\n        pixel \u8fd4\u56de\u56fe\u7247image\u5728\u70b9(x, y)\u5904\u7684\u50cf\u7d20\u7684RGB\u503c\u3002\n\n        Args:\n            img (Mat): opencv\u56fe\u50cf\n            x (int): \u6a2a\u5750\u6807\n            y (int): \u7eb5\u5750\u6807\n\n        Returns:\n            str: \u8fd4\u56de\u5750\u6807\u989c\u8272\u503c\n        \"\"\"\n        b, g, r = img[y, x]\n        return \"#{:02x}{:02x}{:02x}\".format(r, g, b)\n\n    def find_color(img, color, region=None, threshold=4):\n\"\"\"\n        find_color \u627e\u8272\u529f\u80fd\n\n        Args:\n            img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n            color (str): \u989c\u8272\u503c\u5b57\u7b26\u4e32\n            region (list, optional): [xmin,ymin,xmax,ymax]. Defaults to None.\n            threshold (int, optional): \u989c\u8272\u76f8\u4f3c\u5ea6. Defaults to 4.\n\n        Returns:\n            int: x\n            int: y\n        \"\"\"\n        x_min, y_min, x_max, y_max = region or (0, 0, img.shape[1], img.shape[0])\n        img = img[y_min:y_max, x_min:x_max]\n        # \u5c06\u989c\u8272\u503c\u8f6c\u6362\u4e3a RGB \u5206\u91cf\u503c\n        r, g, b = np.array([int(color[i : i + 2], 16) for i in (1, 3, 5)])\n        # \u8ba1\u7b97\u989c\u8272\u5dee\n        diff = np.abs(img - [b, g, r])\n        # \u5224\u65ad\u989c\u8272\u662f\u5426\u5339\u914d\n        match = np.logical_and.reduce(diff &lt;= threshold, axis=2)\n        # \u83b7\u53d6\u5339\u914d\u50cf\u7d20\u70b9\u7684\u5750\u6807\n        y, x = np.where(match)\n        return None if len(x) == 0 else x[0] + x_min, y[0] + y_min\n\n    def find_all_color(img, color, region=None, threshold=4):\n\"\"\"\n        find_all_color \u627e\u5230\u5168\u56fe\u4e2d\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u50cf\u7d20\u70b9\n\n        Args:\n            img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n            color (str): \u989c\u8272\u503c\u5b57\u7b26\u4e32\n            region (list, optional): [xmin,ymin,xmax,ymax]. Defaults to None.\n            threshold (int, optional): \u989c\u8272\u76f8\u4f3c\u5ea6. Defaults to 4.\n\n        Returns:\n            list: \u989c\u8272\u503c\u6240\u6709\u70b9[(x,y),(x,y),(x,y)]\n        \"\"\"\n        x_min, y_min, x_max, y_max = region or (0, 0, img.shape[1], img.shape[0])\n        img = img[y_min:y_max, x_min:x_max]\n        # \u5c06\u989c\u8272\u503c\u8f6c\u6362\u4e3a RGB \u5206\u91cf\u503c\n        r, g, b = np.array([int(color[i : i + 2], 16) for i in (1, 3, 5)])\n        # \u8ba1\u7b97\u989c\u8272\u5dee\n        diff = np.abs(img - [b, g, r])\n        # \u5224\u65ad\u989c\u8272\u662f\u5426\u5339\u914d\n        match = np.logical_and.reduce(diff &lt;= threshold, axis=2)\n        # \u83b7\u53d6\u5339\u914d\u50cf\u7d20\u70b9\u7684\u5750\u6807\n        y, x = np.where(match)\n        return (\n            None\n            if len(x) == 0\n            else [(x[i] + x_min, y[i] + y_min) for i in range(len(x))]\n        )\n\n    def find_multi_colors(img, first_color, colors, region=None, threshold=4):\n\"\"\"\n        find_multi_colors \u591a\u70b9\u627e\u8272\n\n        Args:\n            img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n            first_color (str): \u7b2c\u4e00\u4e2a\u56fe\u50cf\u7684\u989c\u8272\u503c\n            colors (list): [(x,y,color),(x,y,color)] x\u4e3a\u76f8\u5bf9\u7b2c\u4e00\u4e2a\u70b9\u504f\u79fb\u7684\u5750\u6807\u503c,color\u4e3a\u989c\u8272\u503c\"#112233\"\n            region (list, optional): \u8303\u56f4\u6570\u7ec4[xmin,ymin,xmax,ymax]. Defaults to None.\n            threshold (int, optional): \u76f8\u4f3c\u5ea6. Defaults to 4.\n\n        Returns:\n            int: x\n            int: y\n            \u7b2c\u4e00\u4e2a\u70b9\u7684\u5750\u6807\n        \"\"\"\n        first_color_points = Images.find_all_color(\n            img, first_color, region=region, threshold=threshold\n        )\n        if first_color_points is None:\n            return None\n        for x0, y0 in first_color_points:\n            for x, y, target_color in colors:\n                if not Colors.is_similar(\n                    Colors.parse_color(target_color),\n                    Colors.parse_color(Images.pixel(img, x + x0, y + y0)),\n                    threshold=threshold,\n                ):\n                    break\n            return x0, y0\n        return None\n\n    def find_image(img, template, threshold=0.8, region=None, level=3, debug=False):\n\"\"\"\n        find_image \u6a21\u677f\u5339\u914d\n\n        Args:\n            img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n            template (mat): opencv\u683c\u5f0f\u56fe\u50cf\n            threshold (float, optional): \u5339\u914d\u5ea6. Defaults to 0.8.\n            region (list, optional): \u8303\u56f4[]. Defaults to None. \u50cf\u7d20\u6570\u91cf\u4e0e\u67e5\u627e\u6548\u7387\u51e0\u4e4e\u6210\u6b63\u6bd4\n            level (int, optional): \u56fe\u50cf\u91d1\u5b57\u5854\u7b49\u7ea7. Defaults to 3. \u5168\u5c4f1080x2400\u67e5\u627e\u60c5\u51b5\u4e0blevel3\u6548\u7387\u662flevel2\u76845\u500d,\u662flevel1\u768410\u500d,\u5206\u8fa8\u7387\u8d8a\u4f4e\u63d0\u5347\u8d8a\u4e0d\u660e\u663e\n            debug (bool,optional): \u8c03\u8bd5\u6a21\u5f0f(\u65b9\u6846\u7ed8\u5236\u5e76\u663e\u793a) Defaults to False.\n        Returns:\n            max_loc: (x,y)\n        \"\"\"\n        # \u8bbe\u7f6e\u67e5\u627e\u533a\u57df\n        x_min, y_min, x_max, y_max = region or (0, 0, img.shape[1], img.shape[0])\n        img = img[y_min:y_max, x_min:x_max]\n\n        img_array = [img]\n        template_array = [template]\n\n        for i in range(1, level):\n            img = cv2.pyrDown(img)\n            template = cv2.pyrDown(template)\n            img_array.append(img)\n            template_array.append(template)\n\n        for i, img_level, template_level in list(\n            zip(range(level), img_array, template_array)\n        )[::-1]:\n            # \u5339\u914d\u6a21\u677f\u56fe\u50cf\n            res = cv2.matchTemplate(img_level, template_level, cv2.TM_CCOEFF_NORMED)\n            # \u9009\u62e9\u76f8\u4f3c\u5ea6\u6700\u9ad8\u7684\u4e00\u4e2a\u7ed3\u679c\n            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n            if max_val &gt; threshold:\n                # \u8f6c\u6362\u5750\u6807\u7cfb\n                max_loc = (max_loc[0] * (2**i), max_loc[1] * (2**i))\n                if region is not None:\n                    max_loc = (max_loc[0] + x_min, max_loc[1] + y_min)\n                if debug:\n                    copy = img_array[0].copy()\n                    cv2.rectangle(\n                        copy,\n                        [\n                            max_loc[0],\n                            max_loc[1],\n                            template_array[0].shape[1],\n                            template_array[0].shape[0],\n                        ],\n                        (0, 255, 0),\n                        2,\n                    )\n                    Images.save(copy)\n                return [\n                    max_loc[0],\n                    max_loc[1],\n                    max_loc[0] + template_array[0].shape[1],\n                    max_loc[1] + template_array[0].shape[0],\n                ]\n        return None\n\n    def detect_and_compute_features(\n        img, grayscale=True, method=\"SIFT\", region=None, scale=1\n    ):\n\"\"\"\n        detect_and_compute_features \u8ba1\u7b97\u7279\u5f81\u70b9\u548c\u63cf\u8ff0\u503c\n\n        Args:\n            img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n            grayscale (bool, optional): \u662f\u5426\u7070\u5ea6\u5316\u56fe\u50cf. Defaults to True.\n            method (str, optional): \u7279\u5f81\u70b9\u8ba1\u7b97\u65b9\u6cd5. Defaults to 'SIFT'.\n            region (list, optional): \u7279\u5f81\u70b9\u8ba1\u7b97\u8303\u56f4[x_min, y_min, x_max, y_max]. Defaults to None.\n            scale (int, optional): \u56fe\u50cf\u7f29\u653e. Defaults to '1'. \u5206\u8fa8\u7387\u8f83\u5927\u65f6,\u8ba1\u7b97\u6548\u7387\u4e0e\u8fd9\u4e2a\u6210\u6b63\u6bd4\n\n        Raises:\n            ValueError: \"Invalid feature detection method\"\n\n        Returns:\n            keypoints: \u7279\u5f81\u70b9\n            descriptors: \u63cf\u8ff0\u503c\n        \"\"\"\n        # \u8f6c\u6362\u4e3a\u7070\u5ea6\u56fe\u50cf\n        if grayscale:\n            if len(img.shape) == 3:\n                img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n        # \u9009\u62e9\u7279\u5f81\u8ba1\u7b97\u65b9\u6cd5\n        if method == \"SIFT\":\n            feature_detector = cv2.SIFT_create()\n        elif method == \"ORB\":\n            feature_detector = cv2.ORB_create()\n        else:\n            raise ValueError(\"Invalid feature detection method\")\n\n        x_min, y_min, x_max, y_max = region or (0, 0, img.shape[1], img.shape[0])\n        img = img[y_min:y_max, x_min:x_max]\n        img_new = cv2.resize(img, None, fx=scale, fy=scale)\n        keypoints = feature_detector.detect(img_new)\n\n        # \u8c03\u6574\u5173\u952e\u70b9\u5750\u6807\n        for kp in keypoints:\n            kp.pt = ((kp.pt[0]) * (1 / scale), (kp.pt[1]) * (1 / scale))\n\n        _, descriptors = feature_detector.compute(img, keypoints)\n        # img = cv2.drawKeypoints(img,keypoints,img)\n        # Images.save(f\"{random.randint(8,100)}.png\",img)\n        # \u8fd4\u56de\u7279\u5f81\u4fe1\u606f\n        return keypoints, descriptors\n\n    def match_features(\n        img,\n        template,\n        region=None,\n        threshold=0.75,\n        method=\"FLANNBASED\",\n        scale=1,\n        debug=False,\n    ):\n\"\"\"\n        match_features \u7279\u5f81\u5339\u914d\n        (\u8ba1\u7b97\u5c0f\u56fe\u82b1\u8d39\u4e0d\u4e86\u591a\u5c11\u8d44\u6e90,\u91cd\u8981\u7684\u662f\u8ba1\u7b97\u5927\u56fe\u7279,\u6240\u4ee5\u8bf7\u52a1\u5fc5\u533a\u57df\u7279\u5f81\u8ba1\u7b97)\n        \u7531\u4e8eorb\u6548\u679c\u4e0d\u5c3d\u4eba\u610f,\u53ea\u91c7\u7528sift\u8ba1\u7b97\u7279\u5f81\n        \u8ba1\u7b972400x1080\u7684\u5927\u56fe\u6d88\u80170.6s 500x1080\u7684\u56fe\u6d88\u80170.1s\n\n        Args:\n            img (mat): opencv\u683c\u5f0f\u56fe\u50cf \u5927\u56fe\n            template (mat): opencv\u683c\u5f0f\u56fe\u50cf \u5c0f\u56fe\n            region (list, optional): \u5927\u56fe\u7279\u5f81\u8303\u56f4[x_min, y_min, x_max, y_max ]. Defaults to None.\n            threshold (float, optional): \u76f8\u4f3c\u5ea6. Defaults to 0.75.\n            method (str, optional): \u7279\u5f81\u5339\u914d\u7b97\u6cd5. Defaults to \"FLANNBASED\".\u5176\u4ed6\u53ef\u9009\"BRUTEFORCE\",\"BRUTEFORCE_L1\"\n            scale (int, optional): \u56fe\u50cf\u7f29\u653e. Defaults to '1'. \u5206\u8fa8\u7387\u8f83\u5927\u65f6,\u8ba1\u7b97\u6548\u7387\u4e0e\u8fd9\u4e2a\u6210\u6b63\u6bd4\n            debug (bool,optional): \u8c03\u8bd5\u6a21\u5f0f(\u65b9\u6846\u7ed8\u5236\u5e76\u663e\u793a) Defaults to False.\n\n        Raises:\n            ValueError: \u7b97\u6cd5\u4e0d\u5b58\u5728\n\n        Returns:\n            list: \u5c0f\u56fe\u5728\u5927\u56fe\u4e2d\u7684\u8303\u56f4[x, y, w, h ]\n        \"\"\"\n        # \u8ba1\u7b97\u5173\u952e\u70b9\u548c\u63cf\u8ff0\u7b26\n        kp_template, des_template = Images.detect_and_compute_features(\n            template, scale=scale\n        )\n        kp_target, des_target = Images.detect_and_compute_features(\n            img, region=region, scale=scale\n        )\n\n        if method == \"FLANNBASED\":\n            matcher = cv2.FlannBasedMatcher()\n        elif method == \"BRUTEFORCE_L1\":\n            matcher = cv2.BFMatcher(cv2.NORM_L1)\n        elif method == \"BRUTEFORCE\":\n            matcher = cv2.BFMatcher(cv2.NORM_L2)\n        else:\n            raise ValueError(\"Invalid matching method provided.\")\n\n        matches = matcher.knnMatch(des_template, des_target, k=2)\n\n        # \u5e94\u7528Lowe\u7684\u6bd4\u4f8b\u6d4b\u8bd5\n        good_matches = []\n        for m, n in matches:\n            if m.distance &lt; threshold * n.distance:\n                good_matches.append(m)\n\n        # \u5982\u679c\u627e\u5230\u8db3\u591f\u7684\u597d\u5339\u914d\uff0c\u5219\u8ba1\u7b97\u5355\u5e94\u6027\u77e9\u9635\n        if len(good_matches) &gt; 10:\n            src_pts = np.float32(\n                [kp_template[m.queryIdx].pt for m in good_matches]\n            ).reshape(-1, 1, 2)\n            dst_pts = np.float32(\n                [kp_target[m.trainIdx].pt for m in good_matches]\n            ).reshape(-1, 1, 2)\n\n            # \u8ba1\u7b97\u5355\u5e94\u6027\u77e9\u9635\n            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)\n\n            # \u5c06\u6a21\u677f\u56fe\u50cf\u7684\u89d2\u70b9\u6620\u5c04\u5230\u76ee\u6807\u56fe\u50cf\u4e2d\u7684\u76f8\u5e94\u4f4d\u7f6e\n            h, w = template.shape[:2]\n            pts = np.float32([[0, 0], [0, h - 1], [w - 1, h - 1], [w - 1, 0]]).reshape(\n                -1, 1, 2\n            )\n            dst = cv2.perspectiveTransform(pts, M)\n\n            x_min, y_min, _, _ = region or (0, 0, img.shape[1], img.shape[0])\n            # \u8ba1\u7b97\u77e9\u5f62\u533a\u57df\u5750\u6807\n            x, y, w, h = cv2.boundingRect(dst)\n            if debug:\n                copy = img.copy()\n                cv2.rectangle(copy, [x + x_min, y + y_min, w, h], (0, 255, 0), 2)\n                Images.save(copy)\n            return [x + x_min, y + y_min, w + x + x_min, h + y + y_min]\n\n        else:\n            print(\"Not enough matches are found - {}/{}\".format(len(good_matches), 10))\n            return None\n</code></pre>"},{"location":"images/#minidevice.images.Images.detect_and_compute_features","title":"<code>detect_and_compute_features(img, grayscale=True, method='SIFT', region=None, scale=1)</code>","text":"<p>detect_and_compute_features \u8ba1\u7b97\u7279\u5f81\u70b9\u548c\u63cf\u8ff0\u503c</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> required <code>grayscale</code> <code>bool</code> <p>\u662f\u5426\u7070\u5ea6\u5316\u56fe\u50cf. Defaults to True.</p> <code>True</code> <code>method</code> <code>str</code> <p>\u7279\u5f81\u70b9\u8ba1\u7b97\u65b9\u6cd5. Defaults to 'SIFT'.</p> <code>'SIFT'</code> <code>region</code> <code>list</code> <p>\u7279\u5f81\u70b9\u8ba1\u7b97\u8303\u56f4[x_min, y_min, x_max, y_max]. Defaults to None.</p> <code>None</code> <code>scale</code> <code>int</code> <p>\u56fe\u50cf\u7f29\u653e. Defaults to '1'. \u5206\u8fa8\u7387\u8f83\u5927\u65f6,\u8ba1\u7b97\u6548\u7387\u4e0e\u8fd9\u4e2a\u6210\u6b63\u6bd4</p> <code>1</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\"Invalid feature detection method\"</p> <p>Returns:</p> Name Type Description <code>keypoints</code> <p>\u7279\u5f81\u70b9</p> <code>descriptors</code> <p>\u63cf\u8ff0\u503c</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def detect_and_compute_features(\n    img, grayscale=True, method=\"SIFT\", region=None, scale=1\n):\n\"\"\"\n    detect_and_compute_features \u8ba1\u7b97\u7279\u5f81\u70b9\u548c\u63cf\u8ff0\u503c\n\n    Args:\n        img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n        grayscale (bool, optional): \u662f\u5426\u7070\u5ea6\u5316\u56fe\u50cf. Defaults to True.\n        method (str, optional): \u7279\u5f81\u70b9\u8ba1\u7b97\u65b9\u6cd5. Defaults to 'SIFT'.\n        region (list, optional): \u7279\u5f81\u70b9\u8ba1\u7b97\u8303\u56f4[x_min, y_min, x_max, y_max]. Defaults to None.\n        scale (int, optional): \u56fe\u50cf\u7f29\u653e. Defaults to '1'. \u5206\u8fa8\u7387\u8f83\u5927\u65f6,\u8ba1\u7b97\u6548\u7387\u4e0e\u8fd9\u4e2a\u6210\u6b63\u6bd4\n\n    Raises:\n        ValueError: \"Invalid feature detection method\"\n\n    Returns:\n        keypoints: \u7279\u5f81\u70b9\n        descriptors: \u63cf\u8ff0\u503c\n    \"\"\"\n    # \u8f6c\u6362\u4e3a\u7070\u5ea6\u56fe\u50cf\n    if grayscale:\n        if len(img.shape) == 3:\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    # \u9009\u62e9\u7279\u5f81\u8ba1\u7b97\u65b9\u6cd5\n    if method == \"SIFT\":\n        feature_detector = cv2.SIFT_create()\n    elif method == \"ORB\":\n        feature_detector = cv2.ORB_create()\n    else:\n        raise ValueError(\"Invalid feature detection method\")\n\n    x_min, y_min, x_max, y_max = region or (0, 0, img.shape[1], img.shape[0])\n    img = img[y_min:y_max, x_min:x_max]\n    img_new = cv2.resize(img, None, fx=scale, fy=scale)\n    keypoints = feature_detector.detect(img_new)\n\n    # \u8c03\u6574\u5173\u952e\u70b9\u5750\u6807\n    for kp in keypoints:\n        kp.pt = ((kp.pt[0]) * (1 / scale), (kp.pt[1]) * (1 / scale))\n\n    _, descriptors = feature_detector.compute(img, keypoints)\n    # img = cv2.drawKeypoints(img,keypoints,img)\n    # Images.save(f\"{random.randint(8,100)}.png\",img)\n    # \u8fd4\u56de\u7279\u5f81\u4fe1\u606f\n    return keypoints, descriptors\n</code></pre>"},{"location":"images/#minidevice.images.Images.find_all_color","title":"<code>find_all_color(img, color, region=None, threshold=4)</code>","text":"<p>find_all_color \u627e\u5230\u5168\u56fe\u4e2d\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u50cf\u7d20\u70b9</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> required <code>color</code> <code>str</code> <p>\u989c\u8272\u503c\u5b57\u7b26\u4e32</p> required <code>region</code> <code>list</code> <p>[xmin,ymin,xmax,ymax]. Defaults to None.</p> <code>None</code> <code>threshold</code> <code>int</code> <p>\u989c\u8272\u76f8\u4f3c\u5ea6. Defaults to 4.</p> <code>4</code> <p>Returns:</p> Name Type Description <code>list</code> <p>\u989c\u8272\u503c\u6240\u6709\u70b9[(x,y),(x,y),(x,y)]</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def find_all_color(img, color, region=None, threshold=4):\n\"\"\"\n    find_all_color \u627e\u5230\u5168\u56fe\u4e2d\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u50cf\u7d20\u70b9\n\n    Args:\n        img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n        color (str): \u989c\u8272\u503c\u5b57\u7b26\u4e32\n        region (list, optional): [xmin,ymin,xmax,ymax]. Defaults to None.\n        threshold (int, optional): \u989c\u8272\u76f8\u4f3c\u5ea6. Defaults to 4.\n\n    Returns:\n        list: \u989c\u8272\u503c\u6240\u6709\u70b9[(x,y),(x,y),(x,y)]\n    \"\"\"\n    x_min, y_min, x_max, y_max = region or (0, 0, img.shape[1], img.shape[0])\n    img = img[y_min:y_max, x_min:x_max]\n    # \u5c06\u989c\u8272\u503c\u8f6c\u6362\u4e3a RGB \u5206\u91cf\u503c\n    r, g, b = np.array([int(color[i : i + 2], 16) for i in (1, 3, 5)])\n    # \u8ba1\u7b97\u989c\u8272\u5dee\n    diff = np.abs(img - [b, g, r])\n    # \u5224\u65ad\u989c\u8272\u662f\u5426\u5339\u914d\n    match = np.logical_and.reduce(diff &lt;= threshold, axis=2)\n    # \u83b7\u53d6\u5339\u914d\u50cf\u7d20\u70b9\u7684\u5750\u6807\n    y, x = np.where(match)\n    return (\n        None\n        if len(x) == 0\n        else [(x[i] + x_min, y[i] + y_min) for i in range(len(x))]\n    )\n</code></pre>"},{"location":"images/#minidevice.images.Images.find_color","title":"<code>find_color(img, color, region=None, threshold=4)</code>","text":"<p>find_color \u627e\u8272\u529f\u80fd</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> required <code>color</code> <code>str</code> <p>\u989c\u8272\u503c\u5b57\u7b26\u4e32</p> required <code>region</code> <code>list</code> <p>[xmin,ymin,xmax,ymax]. Defaults to None.</p> <code>None</code> <code>threshold</code> <code>int</code> <p>\u989c\u8272\u76f8\u4f3c\u5ea6. Defaults to 4.</p> <code>4</code> <p>Returns:</p> Name Type Description <code>int</code> <p>x</p> <code>int</code> <p>y</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def find_color(img, color, region=None, threshold=4):\n\"\"\"\n    find_color \u627e\u8272\u529f\u80fd\n\n    Args:\n        img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n        color (str): \u989c\u8272\u503c\u5b57\u7b26\u4e32\n        region (list, optional): [xmin,ymin,xmax,ymax]. Defaults to None.\n        threshold (int, optional): \u989c\u8272\u76f8\u4f3c\u5ea6. Defaults to 4.\n\n    Returns:\n        int: x\n        int: y\n    \"\"\"\n    x_min, y_min, x_max, y_max = region or (0, 0, img.shape[1], img.shape[0])\n    img = img[y_min:y_max, x_min:x_max]\n    # \u5c06\u989c\u8272\u503c\u8f6c\u6362\u4e3a RGB \u5206\u91cf\u503c\n    r, g, b = np.array([int(color[i : i + 2], 16) for i in (1, 3, 5)])\n    # \u8ba1\u7b97\u989c\u8272\u5dee\n    diff = np.abs(img - [b, g, r])\n    # \u5224\u65ad\u989c\u8272\u662f\u5426\u5339\u914d\n    match = np.logical_and.reduce(diff &lt;= threshold, axis=2)\n    # \u83b7\u53d6\u5339\u914d\u50cf\u7d20\u70b9\u7684\u5750\u6807\n    y, x = np.where(match)\n    return None if len(x) == 0 else x[0] + x_min, y[0] + y_min\n</code></pre>"},{"location":"images/#minidevice.images.Images.find_image","title":"<code>find_image(img, template, threshold=0.8, region=None, level=3, debug=False)</code>","text":"<p>find_image \u6a21\u677f\u5339\u914d</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> required <code>template</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> required <code>threshold</code> <code>float</code> <p>\u5339\u914d\u5ea6. Defaults to 0.8.</p> <code>0.8</code> <code>region</code> <code>list</code> <p>\u8303\u56f4[]. Defaults to None. \u50cf\u7d20\u6570\u91cf\u4e0e\u67e5\u627e\u6548\u7387\u51e0\u4e4e\u6210\u6b63\u6bd4</p> <code>None</code> <code>level</code> <code>int</code> <p>\u56fe\u50cf\u91d1\u5b57\u5854\u7b49\u7ea7. Defaults to 3. \u5168\u5c4f1080x2400\u67e5\u627e\u60c5\u51b5\u4e0blevel3\u6548\u7387\u662flevel2\u76845\u500d,\u662flevel1\u768410\u500d,\u5206\u8fa8\u7387\u8d8a\u4f4e\u63d0\u5347\u8d8a\u4e0d\u660e\u663e</p> <code>3</code> <code>debug</code> <code>bool, optional</code> <p>\u8c03\u8bd5\u6a21\u5f0f(\u65b9\u6846\u7ed8\u5236\u5e76\u663e\u793a) Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>max_loc</code> <p>(x,y)</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def find_image(img, template, threshold=0.8, region=None, level=3, debug=False):\n\"\"\"\n    find_image \u6a21\u677f\u5339\u914d\n\n    Args:\n        img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n        template (mat): opencv\u683c\u5f0f\u56fe\u50cf\n        threshold (float, optional): \u5339\u914d\u5ea6. Defaults to 0.8.\n        region (list, optional): \u8303\u56f4[]. Defaults to None. \u50cf\u7d20\u6570\u91cf\u4e0e\u67e5\u627e\u6548\u7387\u51e0\u4e4e\u6210\u6b63\u6bd4\n        level (int, optional): \u56fe\u50cf\u91d1\u5b57\u5854\u7b49\u7ea7. Defaults to 3. \u5168\u5c4f1080x2400\u67e5\u627e\u60c5\u51b5\u4e0blevel3\u6548\u7387\u662flevel2\u76845\u500d,\u662flevel1\u768410\u500d,\u5206\u8fa8\u7387\u8d8a\u4f4e\u63d0\u5347\u8d8a\u4e0d\u660e\u663e\n        debug (bool,optional): \u8c03\u8bd5\u6a21\u5f0f(\u65b9\u6846\u7ed8\u5236\u5e76\u663e\u793a) Defaults to False.\n    Returns:\n        max_loc: (x,y)\n    \"\"\"\n    # \u8bbe\u7f6e\u67e5\u627e\u533a\u57df\n    x_min, y_min, x_max, y_max = region or (0, 0, img.shape[1], img.shape[0])\n    img = img[y_min:y_max, x_min:x_max]\n\n    img_array = [img]\n    template_array = [template]\n\n    for i in range(1, level):\n        img = cv2.pyrDown(img)\n        template = cv2.pyrDown(template)\n        img_array.append(img)\n        template_array.append(template)\n\n    for i, img_level, template_level in list(\n        zip(range(level), img_array, template_array)\n    )[::-1]:\n        # \u5339\u914d\u6a21\u677f\u56fe\u50cf\n        res = cv2.matchTemplate(img_level, template_level, cv2.TM_CCOEFF_NORMED)\n        # \u9009\u62e9\u76f8\u4f3c\u5ea6\u6700\u9ad8\u7684\u4e00\u4e2a\u7ed3\u679c\n        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n        if max_val &gt; threshold:\n            # \u8f6c\u6362\u5750\u6807\u7cfb\n            max_loc = (max_loc[0] * (2**i), max_loc[1] * (2**i))\n            if region is not None:\n                max_loc = (max_loc[0] + x_min, max_loc[1] + y_min)\n            if debug:\n                copy = img_array[0].copy()\n                cv2.rectangle(\n                    copy,\n                    [\n                        max_loc[0],\n                        max_loc[1],\n                        template_array[0].shape[1],\n                        template_array[0].shape[0],\n                    ],\n                    (0, 255, 0),\n                    2,\n                )\n                Images.save(copy)\n            return [\n                max_loc[0],\n                max_loc[1],\n                max_loc[0] + template_array[0].shape[1],\n                max_loc[1] + template_array[0].shape[0],\n            ]\n    return None\n</code></pre>"},{"location":"images/#minidevice.images.Images.find_multi_colors","title":"<code>find_multi_colors(img, first_color, colors, region=None, threshold=4)</code>","text":"<p>find_multi_colors \u591a\u70b9\u627e\u8272</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> required <code>first_color</code> <code>str</code> <p>\u7b2c\u4e00\u4e2a\u56fe\u50cf\u7684\u989c\u8272\u503c</p> required <code>colors</code> <code>list</code> <p>[(x,y,color),(x,y,color)] x\u4e3a\u76f8\u5bf9\u7b2c\u4e00\u4e2a\u70b9\u504f\u79fb\u7684\u5750\u6807\u503c,color\u4e3a\u989c\u8272\u503c\"#112233\"</p> required <code>region</code> <code>list</code> <p>\u8303\u56f4\u6570\u7ec4[xmin,ymin,xmax,ymax]. Defaults to None.</p> <code>None</code> <code>threshold</code> <code>int</code> <p>\u76f8\u4f3c\u5ea6. Defaults to 4.</p> <code>4</code> <p>Returns:</p> Name Type Description <code>int</code> <p>x</p> <code>int</code> <p>y</p> <p>\u7b2c\u4e00\u4e2a\u70b9\u7684\u5750\u6807</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def find_multi_colors(img, first_color, colors, region=None, threshold=4):\n\"\"\"\n    find_multi_colors \u591a\u70b9\u627e\u8272\n\n    Args:\n        img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n        first_color (str): \u7b2c\u4e00\u4e2a\u56fe\u50cf\u7684\u989c\u8272\u503c\n        colors (list): [(x,y,color),(x,y,color)] x\u4e3a\u76f8\u5bf9\u7b2c\u4e00\u4e2a\u70b9\u504f\u79fb\u7684\u5750\u6807\u503c,color\u4e3a\u989c\u8272\u503c\"#112233\"\n        region (list, optional): \u8303\u56f4\u6570\u7ec4[xmin,ymin,xmax,ymax]. Defaults to None.\n        threshold (int, optional): \u76f8\u4f3c\u5ea6. Defaults to 4.\n\n    Returns:\n        int: x\n        int: y\n        \u7b2c\u4e00\u4e2a\u70b9\u7684\u5750\u6807\n    \"\"\"\n    first_color_points = Images.find_all_color(\n        img, first_color, region=region, threshold=threshold\n    )\n    if first_color_points is None:\n        return None\n    for x0, y0 in first_color_points:\n        for x, y, target_color in colors:\n            if not Colors.is_similar(\n                Colors.parse_color(target_color),\n                Colors.parse_color(Images.pixel(img, x + x0, y + y0)),\n                threshold=threshold,\n            ):\n                break\n        return x0, y0\n    return None\n</code></pre>"},{"location":"images/#minidevice.images.Images.load","title":"<code>load(path)</code>","text":"<p>load \u52a0\u8f7d\u7f51\u7edc\u56fe\u7247</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u56fe\u50cf\u8def\u5f84</p> required <p>Returns:</p> Name Type Description <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def load(path):\n\"\"\"\n    load \u52a0\u8f7d\u7f51\u7edc\u56fe\u7247\n\n    Args:\n        path (str): \u56fe\u50cf\u8def\u5f84\n\n    Returns:\n        mat: opencv\u683c\u5f0f\u56fe\u50cf\n    \"\"\"\n\n    # \u4e0b\u8f7d\u56fe\u7247\u6570\u636e\n    response = urllib.request.urlopen(path)\n    image_data = response.read()\n    return raw2opencv(image_data)\n</code></pre>"},{"location":"images/#minidevice.images.Images.match_features","title":"<code>match_features(img, template, region=None, threshold=0.75, method='FLANNBASED', scale=1, debug=False)</code>","text":"<p>match_features \u7279\u5f81\u5339\u914d (\u8ba1\u7b97\u5c0f\u56fe\u82b1\u8d39\u4e0d\u4e86\u591a\u5c11\u8d44\u6e90,\u91cd\u8981\u7684\u662f\u8ba1\u7b97\u5927\u56fe\u7279,\u6240\u4ee5\u8bf7\u52a1\u5fc5\u533a\u57df\u7279\u5f81\u8ba1\u7b97) \u7531\u4e8eorb\u6548\u679c\u4e0d\u5c3d\u4eba\u610f,\u53ea\u91c7\u7528sift\u8ba1\u7b97\u7279\u5f81 \u8ba1\u7b972400x1080\u7684\u5927\u56fe\u6d88\u80170.6s 500x1080\u7684\u56fe\u6d88\u80170.1s</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf \u5927\u56fe</p> required <code>template</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf \u5c0f\u56fe</p> required <code>region</code> <code>list</code> <p>\u5927\u56fe\u7279\u5f81\u8303\u56f4[x_min, y_min, x_max, y_max ]. Defaults to None.</p> <code>None</code> <code>threshold</code> <code>float</code> <p>\u76f8\u4f3c\u5ea6. Defaults to 0.75.</p> <code>0.75</code> <code>method</code> <code>str</code> <p>\u7279\u5f81\u5339\u914d\u7b97\u6cd5. Defaults to \"FLANNBASED\".\u5176\u4ed6\u53ef\u9009\"BRUTEFORCE\",\"BRUTEFORCE_L1\"</p> <code>'FLANNBASED'</code> <code>scale</code> <code>int</code> <p>\u56fe\u50cf\u7f29\u653e. Defaults to '1'. \u5206\u8fa8\u7387\u8f83\u5927\u65f6,\u8ba1\u7b97\u6548\u7387\u4e0e\u8fd9\u4e2a\u6210\u6b63\u6bd4</p> <code>1</code> <code>debug</code> <code>bool, optional</code> <p>\u8c03\u8bd5\u6a21\u5f0f(\u65b9\u6846\u7ed8\u5236\u5e76\u663e\u793a) Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u7b97\u6cd5\u4e0d\u5b58\u5728</p> <p>Returns:</p> Name Type Description <code>list</code> <p>\u5c0f\u56fe\u5728\u5927\u56fe\u4e2d\u7684\u8303\u56f4[x, y, w, h ]</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def match_features(\n    img,\n    template,\n    region=None,\n    threshold=0.75,\n    method=\"FLANNBASED\",\n    scale=1,\n    debug=False,\n):\n\"\"\"\n    match_features \u7279\u5f81\u5339\u914d\n    (\u8ba1\u7b97\u5c0f\u56fe\u82b1\u8d39\u4e0d\u4e86\u591a\u5c11\u8d44\u6e90,\u91cd\u8981\u7684\u662f\u8ba1\u7b97\u5927\u56fe\u7279,\u6240\u4ee5\u8bf7\u52a1\u5fc5\u533a\u57df\u7279\u5f81\u8ba1\u7b97)\n    \u7531\u4e8eorb\u6548\u679c\u4e0d\u5c3d\u4eba\u610f,\u53ea\u91c7\u7528sift\u8ba1\u7b97\u7279\u5f81\n    \u8ba1\u7b972400x1080\u7684\u5927\u56fe\u6d88\u80170.6s 500x1080\u7684\u56fe\u6d88\u80170.1s\n\n    Args:\n        img (mat): opencv\u683c\u5f0f\u56fe\u50cf \u5927\u56fe\n        template (mat): opencv\u683c\u5f0f\u56fe\u50cf \u5c0f\u56fe\n        region (list, optional): \u5927\u56fe\u7279\u5f81\u8303\u56f4[x_min, y_min, x_max, y_max ]. Defaults to None.\n        threshold (float, optional): \u76f8\u4f3c\u5ea6. Defaults to 0.75.\n        method (str, optional): \u7279\u5f81\u5339\u914d\u7b97\u6cd5. Defaults to \"FLANNBASED\".\u5176\u4ed6\u53ef\u9009\"BRUTEFORCE\",\"BRUTEFORCE_L1\"\n        scale (int, optional): \u56fe\u50cf\u7f29\u653e. Defaults to '1'. \u5206\u8fa8\u7387\u8f83\u5927\u65f6,\u8ba1\u7b97\u6548\u7387\u4e0e\u8fd9\u4e2a\u6210\u6b63\u6bd4\n        debug (bool,optional): \u8c03\u8bd5\u6a21\u5f0f(\u65b9\u6846\u7ed8\u5236\u5e76\u663e\u793a) Defaults to False.\n\n    Raises:\n        ValueError: \u7b97\u6cd5\u4e0d\u5b58\u5728\n\n    Returns:\n        list: \u5c0f\u56fe\u5728\u5927\u56fe\u4e2d\u7684\u8303\u56f4[x, y, w, h ]\n    \"\"\"\n    # \u8ba1\u7b97\u5173\u952e\u70b9\u548c\u63cf\u8ff0\u7b26\n    kp_template, des_template = Images.detect_and_compute_features(\n        template, scale=scale\n    )\n    kp_target, des_target = Images.detect_and_compute_features(\n        img, region=region, scale=scale\n    )\n\n    if method == \"FLANNBASED\":\n        matcher = cv2.FlannBasedMatcher()\n    elif method == \"BRUTEFORCE_L1\":\n        matcher = cv2.BFMatcher(cv2.NORM_L1)\n    elif method == \"BRUTEFORCE\":\n        matcher = cv2.BFMatcher(cv2.NORM_L2)\n    else:\n        raise ValueError(\"Invalid matching method provided.\")\n\n    matches = matcher.knnMatch(des_template, des_target, k=2)\n\n    # \u5e94\u7528Lowe\u7684\u6bd4\u4f8b\u6d4b\u8bd5\n    good_matches = []\n    for m, n in matches:\n        if m.distance &lt; threshold * n.distance:\n            good_matches.append(m)\n\n    # \u5982\u679c\u627e\u5230\u8db3\u591f\u7684\u597d\u5339\u914d\uff0c\u5219\u8ba1\u7b97\u5355\u5e94\u6027\u77e9\u9635\n    if len(good_matches) &gt; 10:\n        src_pts = np.float32(\n            [kp_template[m.queryIdx].pt for m in good_matches]\n        ).reshape(-1, 1, 2)\n        dst_pts = np.float32(\n            [kp_target[m.trainIdx].pt for m in good_matches]\n        ).reshape(-1, 1, 2)\n\n        # \u8ba1\u7b97\u5355\u5e94\u6027\u77e9\u9635\n        M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)\n\n        # \u5c06\u6a21\u677f\u56fe\u50cf\u7684\u89d2\u70b9\u6620\u5c04\u5230\u76ee\u6807\u56fe\u50cf\u4e2d\u7684\u76f8\u5e94\u4f4d\u7f6e\n        h, w = template.shape[:2]\n        pts = np.float32([[0, 0], [0, h - 1], [w - 1, h - 1], [w - 1, 0]]).reshape(\n            -1, 1, 2\n        )\n        dst = cv2.perspectiveTransform(pts, M)\n\n        x_min, y_min, _, _ = region or (0, 0, img.shape[1], img.shape[0])\n        # \u8ba1\u7b97\u77e9\u5f62\u533a\u57df\u5750\u6807\n        x, y, w, h = cv2.boundingRect(dst)\n        if debug:\n            copy = img.copy()\n            cv2.rectangle(copy, [x + x_min, y + y_min, w, h], (0, 255, 0), 2)\n            Images.save(copy)\n        return [x + x_min, y + y_min, w + x + x_min, h + y + y_min]\n\n    else:\n        print(\"Not enough matches are found - {}/{}\".format(len(good_matches), 10))\n        return None\n</code></pre>"},{"location":"images/#minidevice.images.Images.pixel","title":"<code>pixel(img, x, y)</code>","text":"<p>pixel \u8fd4\u56de\u56fe\u7247image\u5728\u70b9(x, y)\u5904\u7684\u50cf\u7d20\u7684RGB\u503c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>Mat</code> <p>opencv\u56fe\u50cf</p> required <code>x</code> <code>int</code> <p>\u6a2a\u5750\u6807</p> required <code>y</code> <code>int</code> <p>\u7eb5\u5750\u6807</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>\u8fd4\u56de\u5750\u6807\u989c\u8272\u503c</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def pixel(img, x, y):\n\"\"\"\n    pixel \u8fd4\u56de\u56fe\u7247image\u5728\u70b9(x, y)\u5904\u7684\u50cf\u7d20\u7684RGB\u503c\u3002\n\n    Args:\n        img (Mat): opencv\u56fe\u50cf\n        x (int): \u6a2a\u5750\u6807\n        y (int): \u7eb5\u5750\u6807\n\n    Returns:\n        str: \u8fd4\u56de\u5750\u6807\u989c\u8272\u503c\n    \"\"\"\n    b, g, r = img[y, x]\n    return \"#{:02x}{:02x}{:02x}\".format(r, g, b)\n</code></pre>"},{"location":"images/#minidevice.images.Images.read","title":"<code>read(path, flag=cv2.IMREAD_COLOR)</code>","text":"<p>read \u8bfb\u53d6\u56fe\u50cf</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u56fe\u50cf\u8def\u5f84</p> required <code>flag</code> <code>int) </code> <ul> <li>cv2.IMREAD_COLOR (\u9ed8\u8ba4)</li> <li>cv2.IMREAD_GRAYSCALE</li> </ul> <code>cv2.IMREAD_COLOR</code> <p>Returns:</p> Name Type Description <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def read(path, flag=cv2.IMREAD_COLOR):\n\"\"\"\n    read \u8bfb\u53d6\u56fe\u50cf\n\n    Args:\n        path (str): \u56fe\u50cf\u8def\u5f84\n        flag (int) :\n            - cv2.IMREAD_COLOR (\u9ed8\u8ba4)\n            - cv2.IMREAD_GRAYSCALE\n\n    Returns:\n        mat: opencv\u683c\u5f0f\u56fe\u50cf\n    \"\"\"\n    return cv2.imread(path, flags=flag)\n</code></pre>"},{"location":"images/#minidevice.images.Images.save","title":"<code>save(img, path='save.png')</code>","text":"<p>save \u4fdd\u5b58\u56fe\u50cf\u5230\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u8def\u5f84</p> <code>'save.png'</code> <code>img</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf \u9ed8\u8ba4\u4fdd\u5b58\u5230\u5f53\u524d\u8def\u5f84\u4e0bsave.png</p> required Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def save(img, path=\"save.png\"):\n\"\"\"\n    save \u4fdd\u5b58\u56fe\u50cf\u5230\u8def\u5f84\n\n    Args:\n        path (str): \u8def\u5f84\n        img (mat): opencv\u683c\u5f0f\u56fe\u50cf \u9ed8\u8ba4\u4fdd\u5b58\u5230\u5f53\u524d\u8def\u5f84\u4e0bsave.png\n    \"\"\"\n    cv2.imwrite(path, img)\n</code></pre>"},{"location":"images/#minidevice.images.Images.show","title":"<code>show(img, title='')</code>","text":"<p>show \u663e\u793a\u56fe\u50cf</p> <p>Parameters:</p> Name Type Description Default <code>img</code> <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> required <code>title</code> <code>str</code> <p>\u663e\u793a\u7684\u6807\u9898. Defaults to \"\".</p> <code>''</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def show(img, title=\"\"):\n\"\"\"\n    show \u663e\u793a\u56fe\u50cf\n\n    Args:\n        img (mat): opencv\u683c\u5f0f\u56fe\u50cf\n        title (str, optional): \u663e\u793a\u7684\u6807\u9898. Defaults to \"\".\n    \"\"\"\n    cv2.imshow(title, img)\n    cv2.waitKey()\n</code></pre>"},{"location":"images/#minidevice.images.raw2opencv","title":"<code>raw2opencv(raw)</code>","text":"<p>raw to opencv</p> <p>Parameters:</p> Name Type Description Default <code>raw</code> <code>byte</code> <p>raw</p> required <p>Returns:</p> Name Type Description <code>mat</code> <p>opencv\u683c\u5f0f\u56fe\u50cf</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\images.py</code> <pre><code>def raw2opencv(raw):\n\"\"\"raw to opencv\n\n    Args:\n        raw (byte): raw\n\n    Returns:\n        mat: opencv\u683c\u5f0f\u56fe\u50cf\n    \"\"\"\n    return cv2.imdecode(np.frombuffer(raw, dtype=np.uint8), cv2.IMREAD_COLOR)\n</code></pre>"},{"location":"minicap/","title":"minicap","text":""},{"location":"minicap/#minidevice.minicap.Minicap","title":"<code>Minicap</code>","text":"<p>         Bases: <code>ScreenCap</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\minicap.py</code> <pre><code>class Minicap(ScreenCap):\n    def __init__(\n        self,\n        device,\n        minicap_name=None,\n        rate=15,\n        quality=100,\n        use_stream=True,\n        ip=\"127.0.0.1\",\n    ) -&gt; None:\n        self.minicap_adb = ADB(device)\n        self.use_stream = use_stream\n        self._get_device_info()\n        if minicap_name is None:\n            minicap_name = \"minicap_{}\".format(time.time())\n        minicap_params = {\n            \"minicap_name\": minicap_name,\n            \"rate\": rate,\n            \"quality\": quality,\n            \"ip\": ip,\n        }\n        self._get_minicap_params(**minicap_params)\n        if self.use_stream:\n            self._start_minicap_by_stream()\n\n    def screencap_raw(self) -&gt; bytes:\n        if self.use_stream:\n            if self.minicap_popen.poll() is not None:\n                logger.warning(\"\u5c1d\u8bd5\u91cd\u542fminicap\u4e2d\")\n                self._stop_minicap_by_stream()\n                self._start_minicap_by_stream()\n            logger.debug(\"screen by minicap stream\")\n            return self.screen_queue.get()\n        else:\n            logger.debug(\"screen by minicap frame\")\n            return self._minicap_frame()\n\n    def _minicap_frame(self):\n        adb_command = [\n            \"shell\",\n            \"LD_LIBRARY_PATH=/data/local/tmp\",\n            \"/data/local/tmp/minicap\",\n        ]\n        adb_command.extend([\"-P\", f\"{self.vm_size}@{self.vm_size}/0\"])\n        adb_command.extend([\"-Q\", str(self.quality)])\n        adb_command.extend([\"-s\"])\n        raw_data = self.minicap_adb.adb_command(adb_command)\n        jpg_data = raw_data.split(b\"for JPG encoder\\n\" + line_breaker(self.sdk))[-1]\n        jpg_data = jpg_data.replace(line_breaker(self.sdk), b\"\\n\")\n        return jpg_data\n\n    def _get_device_info(self):\n        self.vm_size = self.minicap_adb.get_screen_resolution()\n        self.abi = self.minicap_adb.get_abi()\n        self.sdk = self.minicap_adb.get_sdk()\n\n    def _get_minicap_params(self, minicap_name, quality, rate, ip):\n        self.minicap_name = minicap_name\n        self.quality = quality\n        self.rate = rate\n        self.ip = ip\n\n    def _minicap_available(func):\n        def wrapper(self, *args, **kwargs):\n            try:\n                adb_command = [\n                    \"shell\",\n                    \"LD_LIBRARY_PATH=/data/local/tmp\",\n                    \"/data/local/tmp/minicap\",\n                ]\n                adb_command.extend([\"-P\", f\"{self.vm_size}@{self.vm_size}/0\"])\n                adb_command.extend([\"-t\"])\n                result = self.minicap_adb.adb_command(adb_command).strip()\n                if \"OK\" in result.decode(\"utf-8\"):\n                    return func(self, *args, **kwargs)\n                return False\n            except subprocess.CalledProcessError:\n                return False\n\n        return wrapper\n\n    def _minicap_install(self):\n        if self.sdk == 32 and self.abi == \"x86_64\":\n            self.abi = \"x86\"\n\n        MNC_HOME = \"/data/local/tmp/minicap\"\n        MNC_SO_HOME = \"/data/local/tmp/minicap.so\"\n\n        self.minicap_adb.push_file(f\"{MINICAP_PATH}/{self.abi}/minicap\", MNC_HOME)\n        self.minicap_adb.push_file(\n            f\"{MINICAPSO_PATH}/android-{self.sdk}/{self.abi}/minicap.so\", MNC_SO_HOME\n        )\n        self.minicap_adb.change_file_permission(\"+x\", MNC_HOME)\n\n    @_minicap_available\n    def _start_minicap(self):\n\"\"\"\u542f\u52a8adb\"\"\"\n        adb_command = [ADB_PATH]\n        if self.minicap_adb.device is not None:\n            adb_command.extend([\"-s\", self.minicap_adb.device])\n        adb_command.extend(\n            [\"shell\", \"LD_LIBRARY_PATH=/data/local/tmp\", \"/data/local/tmp/minicap\"]\n        )\n        adb_command.extend([\"-n\", f\"{self.minicap_name}\"])\n        adb_command.extend([\"-P\", f\"{self.vm_size}@{self.vm_size}/0\"])\n        adb_command.extend([\"-Q\", str(self.quality)])\n        adb_command.extend([\"-r\", str(self.rate)])\n        adb_command.extend([\"-S\"])\n        self.minicap_popen = subprocess.Popen(\n            adb_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL\n        )\n        time.sleep(2)\n        logger.info(\"\u542f\u52a8minicap\")\n        return True\n\n    def _forward_minicap(self):\n\"\"\"\u7aef\u53e3\u8f6c\u53d1\"\"\"\n        self.minicap_port = self.minicap_adb.forward_port(\n            \"localabstract:{}\".format(self.minicap_name)\n        )\n\n    def _read_minicap_stream(self):\n        self.minicap_stream = MinicapStream.getBuilder(self.ip, self.minicap_port)\n        self.minicap_stream.run()\n        self.banner = self.minicap_stream.banner\n        self.screen_queue = self.minicap_stream.queue\n\n    def _start_minicap_by_stream(self):\n        if not self._start_minicap():\n            self._minicap_install()\n            if not self._start_minicap():\n                raise Exception(\"minicap\u4e0d\u53ef\u7528\")\n        self._forward_minicap()\n        self._read_minicap_stream()\n\n    def _stop_minicap_by_stream(self):\n        self.minicap_stream.stop()  # \u505c\u6b62stream\n        self.minicap_adb.remove_forward(self.minicap_port)  # \u6e05\u7406\u7aef\u53e3\n        if self.minicap_popen.poll() is None:  # \u6e05\u7406\u7ba1\u9053\n            self.minicap_popen.kill()\n</code></pre>"},{"location":"minitouch/","title":"minitouch","text":""},{"location":"minitouch/#minidevice.minitouch.Minitouch","title":"<code>Minitouch</code>","text":"<p>         Bases: <code>Touch</code>, <code>MNTDevice</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\minitouch.py</code> <pre><code>class Minitouch(Touch, MNTDevice):\n    def __init__(self, device):\n        self.minitouch_adb = ADB(device)\n        self._get_device_info()\n        self._minitouch_install()\n        MNTDevice.__init__(self, device)\n\n    def _get_device_info(self):\n        self.abi = self.minitouch_adb.get_abi()\n\n    def _minitouch_install(self):\n        MNT_HOME = \"/data/local/tmp/minitouch\"\n        self.minitouch_adb.push_file(f\"{MINITOUCH_PATH}/{self.abi}/minitouch\", MNT_HOME)\n        self.minitouch_adb.change_file_permission(\"+x\", MNT_HOME)\n\n    def click(self, x: int, y: int, duration: int):\n\"\"\"\n        click minitouch \u70b9\u51fb\n\n        Args:\n            x (int): \u6a2a\u5750\u6807\n            y (int): \u7eb5\u5750\u6807\n            duration (int, optional): \u6301\u7eed\u65f6\u95f4. Defaults to 100.\n        \"\"\"\n        MNTDevice.tap(self, [(x, y)], duration=duration)\n        logger.debug(f\"minitouch click ({x},{y}) consume:{duration}ms\")\n\n    def swipe(self, points: list, duration: int = 300):\n\"\"\"\n        swipe \u6ed1\u52a8\n\n        Args:\n            points (list): [(x,y),(x,y),(x,y)] \u5750\u6807\u5217\u8868\n            duration (int): \u6301\u7eed\u65f6\u95f4. Defaults to 300.\n        \"\"\"\n        MNTDevice.swipe(self, points, duration=duration)\n        logger.debug(f\"minitouch swipe from ({points[0]}) to ({points[-1]}) consume:{duration}ms\")\n</code></pre>"},{"location":"minitouch/#minidevice.minitouch.Minitouch.click","title":"<code>click(x, y, duration)</code>","text":"<p>click minitouch \u70b9\u51fb</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>\u6a2a\u5750\u6807</p> required <code>y</code> <code>int</code> <p>\u7eb5\u5750\u6807</p> required <code>duration</code> <code>int</code> <p>\u6301\u7eed\u65f6\u95f4. Defaults to 100.</p> required Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\minitouch.py</code> <pre><code>def click(self, x: int, y: int, duration: int):\n\"\"\"\n    click minitouch \u70b9\u51fb\n\n    Args:\n        x (int): \u6a2a\u5750\u6807\n        y (int): \u7eb5\u5750\u6807\n        duration (int, optional): \u6301\u7eed\u65f6\u95f4. Defaults to 100.\n    \"\"\"\n    MNTDevice.tap(self, [(x, y)], duration=duration)\n    logger.debug(f\"minitouch click ({x},{y}) consume:{duration}ms\")\n</code></pre>"},{"location":"minitouch/#minidevice.minitouch.Minitouch.swipe","title":"<code>swipe(points, duration=300)</code>","text":"<p>swipe \u6ed1\u52a8</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list</code> <p>[(x,y),(x,y),(x,y)] \u5750\u6807\u5217\u8868</p> required <code>duration</code> <code>int</code> <p>\u6301\u7eed\u65f6\u95f4. Defaults to 300.</p> <code>300</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\minitouch.py</code> <pre><code>def swipe(self, points: list, duration: int = 300):\n\"\"\"\n    swipe \u6ed1\u52a8\n\n    Args:\n        points (list): [(x,y),(x,y),(x,y)] \u5750\u6807\u5217\u8868\n        duration (int): \u6301\u7eed\u65f6\u95f4. Defaults to 300.\n    \"\"\"\n    MNTDevice.swipe(self, points, duration=duration)\n    logger.debug(f\"minitouch swipe from ({points[0]}) to ({points[-1]}) consume:{duration}ms\")\n</code></pre>"},{"location":"screencap/","title":"screencap","text":""},{"location":"screencap/#minidevice.screencap.ScreenCap","title":"<code>ScreenCap</code>","text":"<p>         Bases: <code>ABC</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\screencap.py</code> <pre><code>class ScreenCap(ABC):\n    @abstractmethod\n    def screencap_raw(self) -&gt; bytes:\n\"\"\"\u622a\u56fe\u6e90\u6570\u636e\"\"\"\n\n    def screencap_opencv(self):\n\"\"\"opencv\u683c\u5f0f\u622a\u56fe\"\"\"\n        raw = self.screencap_raw()\n        return cv2.imdecode(np.frombuffer(raw, dtype=np.uint8), cv2.IMREAD_COLOR)\n\n    def save_screencap(self, filename=\"screencap.png\"):\n\"\"\"\n        save_screencap \u4fdd\u5b58\u622a\u56fe\n\n        Args:\n            filename (str, optional): \u622a\u56fe\u4fdd\u5b58\u8def\u5f84. Defaults to \"screencap.png\".\n        \"\"\"\n        cv2.imwrite(filename, self.screencap_opencv())\n</code></pre>"},{"location":"screencap/#minidevice.screencap.ScreenCap.save_screencap","title":"<code>save_screencap(filename='screencap.png')</code>","text":"<p>save_screencap \u4fdd\u5b58\u622a\u56fe</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>\u622a\u56fe\u4fdd\u5b58\u8def\u5f84. Defaults to \"screencap.png\".</p> <code>'screencap.png'</code> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\screencap.py</code> <pre><code>def save_screencap(self, filename=\"screencap.png\"):\n\"\"\"\n    save_screencap \u4fdd\u5b58\u622a\u56fe\n\n    Args:\n        filename (str, optional): \u622a\u56fe\u4fdd\u5b58\u8def\u5f84. Defaults to \"screencap.png\".\n    \"\"\"\n    cv2.imwrite(filename, self.screencap_opencv())\n</code></pre>"},{"location":"screencap/#minidevice.screencap.ScreenCap.screencap_opencv","title":"<code>screencap_opencv()</code>","text":"<p>opencv\u683c\u5f0f\u622a\u56fe</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\screencap.py</code> <pre><code>def screencap_opencv(self):\n\"\"\"opencv\u683c\u5f0f\u622a\u56fe\"\"\"\n    raw = self.screencap_raw()\n    return cv2.imdecode(np.frombuffer(raw, dtype=np.uint8), cv2.IMREAD_COLOR)\n</code></pre>"},{"location":"screencap/#minidevice.screencap.ScreenCap.screencap_raw","title":"<code>screencap_raw()</code>  <code>abstractmethod</code>","text":"<p>\u622a\u56fe\u6e90\u6570\u636e</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\screencap.py</code> <pre><code>@abstractmethod\ndef screencap_raw(self) -&gt; bytes:\n\"\"\"\u622a\u56fe\u6e90\u6570\u636e\"\"\"\n</code></pre>"},{"location":"touch/","title":"touch","text":""},{"location":"touch/#minidevice.touch.Touch","title":"<code>Touch</code>","text":"<p>         Bases: <code>ABC</code></p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\touch.py</code> <pre><code>class Touch(ABC):\n    @abstractclassmethod\n    def click(self, x: int, y: int, duration: int):\n\"\"\"\u70b9\u51fb\"\"\"\n\n    @abstractclassmethod\n    def swipe(self, points: list, duration: int):\n\"\"\"\u6ed1\u52a8\"\"\"\n</code></pre>"},{"location":"touch/#minidevice.touch.Touch.click","title":"<code>click(x, y, duration)</code>","text":"<p>\u70b9\u51fb</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\touch.py</code> <pre><code>@abstractclassmethod\ndef click(self, x: int, y: int, duration: int):\n\"\"\"\u70b9\u51fb\"\"\"\n</code></pre>"},{"location":"touch/#minidevice.touch.Touch.swipe","title":"<code>swipe(points, duration)</code>","text":"<p>\u6ed1\u52a8</p> Source code in <code>C:\\Users\\alex\\Desktop\\Code\\Python\\minidevice\\minidevice\\touch.py</code> <pre><code>@abstractclassmethod\ndef swipe(self, points: list, duration: int):\n\"\"\"\u6ed1\u52a8\"\"\"\n</code></pre>"}]}